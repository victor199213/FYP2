<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_background_gear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setting variable for fixed position of x and y, and sprite size
_posx = Skill_Background.x + Skill_Background._sprite_size_x * 0.5;
_posy = Skill_Background.y - Skill_Background._sprite_size_y * 0.05;

image_xscale = 1.5;
image_yscale = 0.7;
image_speed = 0;
image_index = 0;

_sprite_size_x = sprite_width;
_sprite_size_y = sprite_height;

x = _posx;
y = _posy;

i_skill = 1;
i_skill_max = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_posx = Skill_Background.x + Skill_Background._sprite_size_x * 0.5;
_posy = Skill_Background.y - Skill_Background._sprite_size_y * 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Two Text
draw_set_font(fnt_UIDescription);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_color(make_color_rgb(224,255,255));

draw_text_transformed(x , y - _sprite_size_y * 0.4, "Player Two", 2.5, 2.5, 0);

draw_set_font(-1);
draw_set_valign(fa_left);
draw_set_halign(fa_top);
draw_set_color(c_black);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Button clicking for skill selection
// Buttons and image to show skill
switch (i_skill)
{
    default:
    break;
    
    case 1:
    if (global.b_InstantHeal_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Instant_Heal, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Instant Heal";
                    global.b_InstantHeal_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Instant Heal";
                    global.b_InstantHeal_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Instant Heal";
                    global.b_InstantHeal_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Instant_Heal, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
    
    case 2:
    if (global.b_HealOvertime_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Heal_Overtime, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Heal Overtime";
                    global.b_HealOvertime_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Heal Overtime";
                    global.b_HealOvertime_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Heal Overtime";
                    global.b_HealOvertime_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Heal_Overtime, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
    
    case 3:
    if (global.b_Bloodrage_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Bloodrage, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Bloodrage";
                    global.b_Bloodrage_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Bloodrage";
                    global.b_Bloodrage_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Bloodrage";
                    global.b_Bloodrage_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Bloodrage, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
    
    case 4:
    if (global.b_ArmourIncrease_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Armor_Increase, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Armour Increase";
                    global.b_ArmourIncrease_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Armour Increase";
                    global.b_ArmourIncrease_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Armour Increase";
                    global.b_ArmourIncrease_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Armor_Increase, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
    
    case 5:
    if (global.b_AttackUp_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Attack_Increase, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Attack Up";
                    global.b_AttackUp_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Attack Up";
                    global.b_AttackUp_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Attack Up";
                    global.b_AttackUp_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Attack_Increase, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
    
    case 6:
    if (global.b_MoveSpeedUp_chosen == true)
    {
        draw_sprite_ext(spr_button, 4, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(spr_Movement_Up, 1, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    
    else
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 28 * 1.5 &amp;&amp;
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; y - 28 * 1.5 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; y + 28 * 1.5)
        {
            draw_sprite_ext(spr_button, 1, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Movement Increase";
                    global.b_MoveSpeedUp_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = true &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == false)
                {
                    global.b_playerTwo_skillSlot_chosen[1] = true;
                    global.b_playerTwo_skillSlot[1] = "Movement Increase";
                    global.b_MoveSpeedUp_chosen = true;
                }
                
                else if (global.b_playerTwo_skillSlot_chosen[0] = false &amp;&amp; global.b_playerTwo_skillSlot_chosen[1] == true)
                {
                    global.b_playerTwo_skillSlot_chosen[0] = true;
                    global.b_playerTwo_skillSlot[0] = "Movement Increase";
                    global.b_MoveSpeedUp_chosen = true;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, x + _sprite_size_x * 0.35, y, 1.5, 1.5, 0, c_white, 1);
        }
        
        draw_sprite_ext(spr_Movement_Up, 0, x + _sprite_size_x * 0.35, y, (48 * 1.5)/ 256, (48 * 1.5) / 256, 0, c_white, 1);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow clicking for next skill selection
// Arrows

// Up Arrow
if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 23 &amp;&amp;
    device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 23 &amp;&amp;
    device_mouse_y_to_gui(0) &gt; y - _sprite_size_y * 0.225 - 23 &amp;&amp;
    device_mouse_y_to_gui(0) &lt; y - _sprite_size_y * 0.225 + 23)
{
    draw_sprite_ext(spr_arrow_up, 1, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.225, 1, 1, 0, c_white, 1);
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        if (i_skill &lt;= 1)
        {
            i_skill = i_skill_max;
        }
        
        else
        {
            i_skill -= 1;
        }
    }
}

else
{
    draw_sprite_ext(spr_arrow_up, 0, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.225, 1, 1, 0, c_white, 1);
}

// Down Arrow
if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35) - 23 &amp;&amp;
    device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35) + 23 &amp;&amp;
    device_mouse_y_to_gui(0) &gt; y + _sprite_size_y * 0.225 - 23 &amp;&amp;
    device_mouse_y_to_gui(0) &lt; y + _sprite_size_y * 0.225 + 23)
{
    draw_sprite_ext(spr_arrow_down, 1, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.225, 1, 1, 0, c_white, 1);
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        if (i_skill &gt;= i_skill_max)
        {
            i_skill = 1;
        }
        
        else
        {
            i_skill += 1;
        }
    }
}

else
{
    draw_sprite_ext(spr_arrow_down, 0, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.225, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Skill Slot 1 and to remove skills inside
// Slot 1
if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.35) - 28 &amp;&amp;
    device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.35) + 28 &amp;&amp;
    device_mouse_y_to_gui(0) &gt; y - _sprite_size_y * 0.15 - 28 &amp;&amp;
    device_mouse_y_to_gui(0) &lt; y - _sprite_size_y * 0.15 + 28)
{
    draw_sprite_ext(spr_button, 1, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 1, 1, 0, c_white, 1);
    if (global.b_playerTwo_skillSlot_chosen[0] == true)
    {
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            if (global.b_playerTwo_skillSlot[0] == "Instant Heal")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_InstantHeal_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[0] == "Heal Overtime")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_HealOvertime_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[0] == "Bloodrage")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_Bloodrage_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[0] == "Armour Increase")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_ArmourIncrease_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[0] == "Attack Up")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_AttackUp_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[0] == "Movement Increase")
            {
                global.b_playerTwo_skillSlot_chosen[0] = false;
                global.b_playerTwo_skillSlot[0] = "";
                global.b_MoveSpeedUp_chosen = false;
            }
        }
    }
}

else
{
    draw_sprite_ext(spr_button, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Skill Slot 2 and to remove skills inside
// Slot 2
if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.35) - 28 &amp;&amp;
    device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.35) + 28 &amp;&amp;
    device_mouse_y_to_gui(0) &gt; y + _sprite_size_y * 0.15 - 28 &amp;&amp;
    device_mouse_y_to_gui(0) &lt; y + _sprite_size_y * 0.15 + 28)
{
    draw_sprite_ext(spr_button, 1, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 1, 1, 0, c_white, 1);
    if (global.b_playerTwo_skillSlot_chosen[1] == true)
    {
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            if (global.b_playerTwo_skillSlot[1] == "Instant Heal")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_InstantHeal_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[1] == "Heal Overtime")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_HealOvertime_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[1] == "Bloodrage")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_Bloodrage_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[1] == "Armour Increase")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_ArmourIncrease_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[1] == "Attack Up")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_AttackUp_chosen = false;
            }
            
            if (global.b_playerTwo_skillSlot[1] == "Movement Increase")
            {
                global.b_playerTwo_skillSlot_chosen[1] = false;
                global.b_playerTwo_skillSlot[1] = "";
                global.b_MoveSpeedUp_chosen = false;
            }
        }
    }
}

else
{
    draw_sprite_ext(spr_button, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show Skill slot 1 image Selected
if (global.b_playerTwo_skillSlot[0] == "Instant Heal")
{
    draw_sprite_ext(spr_Instant_Heal, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[0] == "Heal Overtime")
{
    draw_sprite_ext(spr_Heal_Overtime, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[0] == "Bloodrage")
{
    draw_sprite_ext(spr_Bloodrage, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[0] == "Armour Increase")
{
    draw_sprite_ext(spr_Armor_Increase, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[0] == "Attack Up")
{
    draw_sprite_ext(spr_Attack_Increase, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[0] == "Movement Increase")
{
    draw_sprite_ext(spr_Movement_Up, 0, x - _sprite_size_x * 0.35, y - _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show Skill slot 2 image Selected
if (global.b_playerTwo_skillSlot[1] == "Instant Heal")
{
    draw_sprite_ext(spr_Instant_Heal, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[1] == "Heal Overtime")
{
    draw_sprite_ext(spr_Heal_Overtime, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[1] == "Bloodrage")
{
    draw_sprite_ext(spr_Bloodrage, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[1] == "Armour Increase")
{
    draw_sprite_ext(spr_Armor_Increase, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[1] == "Attack Up")
{
    draw_sprite_ext(spr_Attack_Increase, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}

if (global.b_playerTwo_skillSlot[1] == "Movement Increase")
{
    draw_sprite_ext(spr_Movement_Up, 0, x - _sprite_size_x * 0.35, y + _sprite_size_y * 0.15, 48 / 256, 48 / 256, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Name and description of skills
draw_set_font(fnt_UIDescription);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_color(make_color_rgb(224,255,255));
switch (i_skill)
{
    default:
    break;
    
    case 1:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_InstantHealName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_InstantHealDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
    
    case 2:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_HealOvertimeName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_HealOvertimeDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
    
    case 3:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_BloodrageName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_BloodrageDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
    
    case 4:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_ArmourIncreaseName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_ArmourIncreaseDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
    
    case 5:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_AttackUpName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_AttackUpDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
    
    case 6:
    draw_text_transformed(x, y - _sprite_size_y * 0.2, c_PlayerMoveIncreaseName, 1.5, 1.5, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_ext(x - _sprite_size_x * 0.2, y - _sprite_size_y * 0.1, c_PlayerMoveIncreaseDescription, -1, 225);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    break;
}

draw_set_font(-1);
draw_set_valign(fa_left);
draw_set_halign(fa_top);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
