<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>shooter_wood_smallGuns</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Properties of a Handgun
i_ammo = 1;

// Damage of the handgun. Can be upgraded
i_damage = 30;
i_baseDamage = 30;
i_maxDamage = 100;

// Fire rate of the handgun. Can be upgraded
f_cooldown = 0.7;
f_cooldown_timer = 0;

// Handgun's upgrades available, and its cost
i_MaxLevel = 3;

b_fire = true;
name = "Handgun";

image_index = 0;
image_speed = 0;

image_xscale *= 1.5;
image_yscale *= 1.5;

// Creating offsets to match with Pleyer
offset_x = 32 * 0.3;
offset_y = 15;

// Creating the depth of the Handgun
depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>f_cooldown_timer = f_cooldown_timer + (1 / room_speed);

if (f_cooldown_timer &gt; f_cooldown)
{
    b_fire = true;
}

if (R_Player.b_deadAnim == false)
{
    if (R_Player.SHOOT &amp;&amp; b_fire == true)
    {
        if (i_ammo &gt; 0)
        {      
            b_fire = false;
            f_cooldown_timer = 0;
            instance_create(x, y, R_Gunfire);
            instance_create(x, y, R_Player_Handgun_Ammo);
        }
    }
}

x = R_Player.x + offset_x;
y = R_Player.y + offset_y;

// Rotate the image if the player is facing left
if (R_Player.b_faceLeft == true)
{
    image_xscale = -1.5;
    offset_x = 32 * 0.34 * -1;
}

else if (R_Player.b_faceRight == true)
{
    image_xscale = 1.5;
    offset_x = 32 * 0.4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (R_Player.b_deadAnim == false)
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
