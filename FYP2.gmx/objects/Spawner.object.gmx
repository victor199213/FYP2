<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TmpSpawner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>seconds = 0;
waveTime = 0;
wave = 1;
waveDelay = 30;
randomize();

particle = part_system_create();
part_system_depth(particle,50);
sparkle = part_type_create();
particle_emitter = part_emitter_create(particle);
roomTimer = 10;
audio_play_sound(mus_dungeon02,0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>seconds += 1 / room_speed;
waveTime += 1 / room_speed;
image_speed = 10/60;

if(waveTime &lt;= 60 &amp;&amp; wave &lt;= 5)
{
    if(seconds &gt;= 5)
    {
        switch(irandom_range(1,3))
        {
            case 1:
                x = room_width * 0.1;
                y = room_height * 0.05 ;
                break;
            case 2:
                x = room_width * 0.5;
                y = room_height * 0.05 ;
                break;
            case 3:
                x = room_width * 0.9;
                y = room_height * 0.05 ;
                break;
        }
        switch(irandom_range(1,3))
        {
            case 1:
                instance_create(x, y, EnemyShooting);
                break;
            case 2:
                instance_create(x, y, Enemy);
                break;
            case 3:
                instance_create(x, y, EnemyElite);
                break;
        }
        seconds = 0;
    }
}
if(waveTime &gt;= 60)
{
    waveTime = 60;
    waveDelay -= 1 / room_speed;
    if(waveDelay &lt; 0)
    {
        wave += 1;
        waveDelay = 30;
        waveTime = 0;
    }
}

if(wave &gt;= 5 &amp;&amp; waveTime &gt;= 60)
{
    part_emitter_destroy_all(particle);
    audio_stop_all();
    roomTimer -= 1 / room_speed;
    if(roomTimer &lt;= 0)
    {   
        room_goto(MainMenu);
    }
}

if(Objective.health &lt;= 0)
{
    part_emitter_destroy_all(particle);
    roomTimer -= 1 / room_speed;
    if(roomTimer &lt;= 0)
    {   
        room_goto(MainMenu);
    }
}

if(wave &lt; 5)
{
    part_type_shape(sparkle,pt_shape_spark);
    part_type_orientation(sparkle,0,0,0,0,1);
    part_type_size(sparkle,0.2,0.2,0,0);
    part_type_colour_rgb(sparkle,255,255,255,255,0,0);
    part_type_speed(sparkle,1,1.5,0.05,0);
    part_type_direction(sparkle,270,270,0,4);
    part_type_life(sparkle,20,50);
    
    part_emitter_region(particle,particle_emitter,x - 60, x + 60,y,y,ps_shape_ellipse,ps_distr_linear);
    part_emitter_stream(particle,particle_emitter,sparkle,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_UIDescriptiontwo);
draw_set_valign(fa_middle);
draw_set_color(c_white);
if(roomTimer &lt; 10)
{   
    draw_sprite_ext(spr_background_stat, 0, global.GUI_width * 0.5, global.GUI_height *0.5, 1,1, 0, c_white, 1);
    draw_text_transformed(global.GUI_width * 0.42 ,global.GUI_height * 0.54,"RETURNING TO MENU:",2,2,1);
    draw_text_transformed(global.GUI_width * 0.42 ,global.GUI_height * 0.56,string(roomTimer),2,2,1);
    if(wave &gt;= 5 &amp;&amp; waveTime &gt;= 60)
    {   
        draw_text_transformed(global.GUI_width * 0.42 ,global.GUI_height * 0.5,"You Win",5,5,1);
    }
    if(Objective.health &lt;= 0)
    {
        draw_text_transformed(global.GUI_width * 0.42 ,global.GUI_height * 0.5,"You Lose",5,5,1);
    }
}
else
{

    draw_sprite_ext(spr_background_stat, 0, global.GUI_width * 0.5, global.GUI_height *0.07, 1, 0.4, 0, c_white, 0.7);
    draw_text_transformed(global.GUI_width * 0.415 ,global.GUI_height * 0.045,"Wave: " + string( wave) + "/5",2,1.5,0);
    draw_text_transformed(global.GUI_width * 0.415 ,global.GUI_height * 0.065,"WaveTime: " + string(waveTime) ,2,1.5,0);
    draw_text_transformed(global.GUI_width * 0.415 ,global.GUI_height * 0.085,"WaveDelay: " + string(waveDelay),2,1.5,0);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
