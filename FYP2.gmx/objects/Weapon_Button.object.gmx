<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setting variable for fixed position of x and y, and sprite size
_posx = Pregame_Background.x + Pregame_Background._sprite_size_x - room_width * 0.125;
_posy = Pregame_Background.y - (Pregame_Background._sprite_size_y * 0.75);
// Changing the image Properties
image_xscale = 4;
image_yscale = 1;
image_speed = 0;
image_index = 0;

if (MainMenuStructure.b_solo == true)
{
    switch (MainMenuStructure._Pregame_Selection)
    {
        default:
        break;
        
        case "Items":
        image_index = 0;
        break;
        
        case "Characters":
        image_index = 0;
        break;
        
        case "Weapons":
        image_index = 3;
        break;
    }
}


// Fixing the position of the button
x = _posx;
y = _posy;

// Variables created to specifically show the weapon's sprite and stats, and position
i_weaponrySlot = 1;
i_maxWeaponry = 4;

_equippedSlot[0] = "";
_equippedSlot[1] = "";
_slotweaponName = "";

_boxposx = global.GUI_width * 0.4;
_boxposy = global.GUI_height * 0.5;
_draw_weapon_posx = global.GUI_width * 0.4;
_draw_weapon_posy = global.GUI_height * 0.4;

_equipSlots_posx = global.GUI_width * 0.4;
_equipSlotOne_posy = global.GUI_height * 0.4;
_equipSlotTwo_posy = global.GUI_height * 0.6;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_posx = Pregame_Background.x + Pregame_Background._sprite_size_x //- room_width * 0.125;
_posy = Pregame_Background.y - (Pregame_Background._sprite_size_y * 0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MainMenuStructure.b_solo == true)
{
    switch (MainMenuStructure._Pregame_Selection)
    {
        default:
        break;
        
        case "Items":
        image_index = 0;
        break;
        
        case "Characters":
        image_index = 0;
        break;
        
        case "Weapons":
        image_index = 3;
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MainMenuStructure.b_solo == true)
{
    image_index = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MainMenuStructure._Pregame_Selection != "Weapons" &amp;&amp; MainMenuStructure.b_solo == true)
{
    MainMenuStructure._Pregame_Selection = "Weapons";
    image_index = 3;
    Character_Button.image_index = 0;
    Item_Button.image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI with Interactions
if (MainMenuStructure.b_solo == true &amp;&amp; Pregame_Background.b_backAnim == false &amp;&amp;
    Pregame_Background.b_nextAnim == false)
{
    draw_set_font(fnt_UIName);
    draw_set_valign(fa_middle);
    draw_set_color(make_color_rgb(224,255,255));
    // Drawing out all the weapons available to choose
    if (MainMenuStructure._Pregame_Selection == "Weapons")
    {
        /*
            The codes will be split into sections. Mainly:
            1. Box with weapon shown
                - The description and stats
            2. Up/ down arrow to see the range of weaponry
            3. Selected weapons
        */
        
        // Section 1.
        draw_sprite_ext(spr_background_gear, 0, _boxposx, _boxposy, 0.8, 0.7, 0, c_white, 1);
        if (device_mouse_x_to_gui(0) &lt; _draw_weapon_posx + (28 * 1.5) &amp;&amp;
            device_mouse_x_to_gui(0) &gt; _draw_weapon_posx - (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &lt; _draw_weapon_posy + (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &gt; _draw_weapon_posy - (28 * 1.5))
        {
            draw_sprite_ext(spr_button, 1, _draw_weapon_posx, _draw_weapon_posy, 1.5, 1.5, 0, c_white, 1);
            
            // Checking on mouse left-click to determine chosen weapon on which slot
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (_equippedSlot[0] == "" &amp;&amp; _slotweaponName != _equippedSlot[1])
                {
                    switch (i_weaponrySlot)
                    {
                        default:
                        break;
                        
                        case 1:
                            _equippedSlot[0] = _slotweaponName;
                        break;
                        
                        case 2:
                            _equippedSlot[0] = _slotweaponName;
                        break;
                        
                        case 3:
                        break;
                        
                        case 4:
                        break;
                    }
                }
                
                if (_equippedSlot[0] != "" &amp;&amp; _equippedSlot[1] == "" &amp;&amp; _slotweaponName != _equippedSlot[0])
                {
                    switch (i_weaponrySlot)
                    {
                        default:
                        break;
                        
                        case 1:
                            _equippedSlot[1] = _slotweaponName;
                        break;
                        
                        case 2:
                            _equippedSlot[1] = _slotweaponName;
                        break;
                        
                        case 3:
                        break;
                        
                        case 4:
                        break;
                    }                
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, _draw_weapon_posx, _draw_weapon_posy, 1.5, 1.5, 0, c_white, 1);
        }
        
        switch (i_weaponrySlot)
        {
            default:
            break;
            
            case 1:
                _slotweaponName = "Handgun";
                // Weapon Sprite
                draw_sprite_ext(shooter_wood_smallGuns, 0, _draw_weapon_posx, _draw_weapon_posy, 3, 3, 0, c_white, 1);
                
                // Weapon Stats
                draw_set_color(c_aqua);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.48, "Total Ammos:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.51, "Damage:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.54, "Fire-rate:", 0.6, 0.6, 0);
                // Resetting the color back to the defaulted
                draw_set_color(make_color_rgb(224,255,255));
                
                // Drawing the stat rating
                draw_set_halign(fa_right);
                // Character One
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.48, "Average", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.51, "Average", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.54, "Average", 0.6, 0.6, 0);
                // Description of the gun
                draw_set_halign(fa_middle);
                draw_text_ext_transformed(_draw_weapon_posx, global.GUI_height * 0.625, c_HandgunDescription, -1, global.GUI_width * 0.15, 0.6, 0.6, 0);            
                // Resetting horizontal align
                draw_set_halign(fa_left);
            break;
            
            case 2:
                _slotweaponName = "AK-47";
                // Weapon Sprite
                draw_sprite_ext(shooter_wood_smallGuns, 1, _draw_weapon_posx, _draw_weapon_posy, 3, 3, 0, c_white, 1);
                
                // Weapon Stats
                draw_set_color(c_aqua);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.48, "Total Ammos:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.51, "Damage:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.54, "Fire-rate:", 0.6, 0.6, 0);
                // Resetting the color back to the defaulted
                draw_set_color(make_color_rgb(224,255,255));
                
                // Drawing the stat rating
                draw_set_halign(fa_right);
                // Character One
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.48, "Good", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.51, "Slow", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.54, "Fast", 0.6, 0.6, 0);
                // Description of the gun
                draw_set_halign(fa_middle);
                draw_text_ext_transformed(_draw_weapon_posx, global.GUI_height * 0.625, c_AK47Description, -1, global.GUI_width * 0.15, 0.6, 0.6, 0);            
                // Resetting horizontal align
                draw_set_halign(fa_left);
            break;
            
            case 3:
                // Weapon Sprite
                //draw_sprite_ext(shooter_wood_smallGuns, 0, _draw_weapon_posx, _draw_weapon_posy, 3, 3, 0, c_white, 1);
                
                // Weapon Stats
                draw_set_color(c_aqua);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.48, "Total Ammos:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.51, "Damage:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.54, "Fire-rate:", 0.6, 0.6, 0);
                // Resetting the color back to the defaulted
                draw_set_color(make_color_rgb(224,255,255));
                
                // Drawing the stat rating
                draw_set_halign(fa_right);
                // Character One
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.48, "Good", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.51, "Average", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.54, "Average", 0.6, 0.6, 0);
                draw_set_halign(fa_left);
            break;
            
            case 4:
                // Weapon Sprite
                //draw_sprite_ext(shooter_wood_smallGuns, 0, _draw_weapon_posx, _draw_weapon_posy, 3, 3, 0, c_white, 1);
                
                // Weapon Stats
                draw_set_color(c_aqua);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.48, "Total Ammos:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.51, "Damage:", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.345, global.GUI_height * 0.54, "Fire-rate:", 0.6, 0.6, 0);
                // Resetting the color back to the defaulted
                draw_set_color(make_color_rgb(224,255,255));
                
                // Drawing the stat rating
                draw_set_halign(fa_right);
                // Character One
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.48, "Good", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.51, "Average", 0.6, 0.6, 0);
                draw_text_transformed(global.GUI_width * 0.455, global.GUI_height * 0.54, "Average", 0.6, 0.6, 0);
                draw_set_halign(fa_left);
            break;
        }
        
        // Section 2.
        // The left arrow
        if (device_mouse_x_to_gui(0) &lt; global.GUI_width * 0.3 + (28 * 1.5) &amp;&amp;
            device_mouse_x_to_gui(0) &gt; global.GUI_width * 0.3 - (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &lt; _boxposy + (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &gt; _boxposy - (28 * 1.5))
        {
            draw_sprite_ext(spr_arrow_left, 1, global.GUI_width * 0.3, _boxposy, 1, 1, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (i_weaponrySlot &gt; 1)
                {
                    i_weaponrySlot -= 1;
                }
    
                else
                {
                    i_weaponrySlot = i_maxWeaponry;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_arrow_left, 0, global.GUI_width * 0.3, _boxposy, 1, 1, 0, c_white, 1);
        }
        
        // The right arrow
        if (device_mouse_x_to_gui(0) &lt; global.GUI_width * 0.5 + (28 * 1.5) &amp;&amp;
            device_mouse_x_to_gui(0) &gt; global.GUI_width * 0.5 - (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &lt; _boxposy + (28 * 1.5) &amp;&amp;
            device_mouse_y_to_gui(0) &gt; _boxposy - (28 * 1.5))
        {
            draw_sprite_ext(spr_arrow_right, 1, global.GUI_width * 0.5, _boxposy, 1, 1, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (i_weaponrySlot &lt; i_maxWeaponry)
                {
                    i_weaponrySlot += 1;
                }
    
                else
                {
                    i_weaponrySlot = 1;
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_arrow_right, 0, global.GUI_width * 0.5, _boxposy, 1, 1, 0, c_white, 1);
        }
        
        // Section 3.
        // The first selected and equipped slot
        // Slot 1
        draw_set_font(fnt_UIName);
        draw_set_halign(fa_middle);
        draw_text_transformed(global.GUI_width * 0.65, global.GUI_height * 0.35, "Slot 1", 1.2, 1.2, 0);
        if (device_mouse_x_to_gui(0) &lt; global.GUI_width * 0.65 + 28 &amp;&amp;
            device_mouse_x_to_gui(0) &gt; global.GUI_width * 0.65 - 28 &amp;&amp;
            device_mouse_y_to_gui(0) &lt; global.GUI_height * 0.4 + 28 &amp;&amp;
            device_mouse_y_to_gui(0) &gt; global.GUI_height * 0.4 - 28)
        {
            draw_sprite_ext(spr_button, 1, global.GUI_width * 0.65, global.GUI_height * 0.4, 1, 1, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (_equippedSlot[0] != "")
                {
                    _equippedSlot[0] = "";
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, global.GUI_width * 0.65, global.GUI_height * 0.4, 1, 1, 0, c_white, 1);
        }
        
        switch (_equippedSlot[0])
        {
            default:
            break;
            
            case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.65, global.GUI_height * 0.4, 2, 2, 0, c_white, 1);
            break;
            
            case "AK-47":
            draw_sprite_ext(shooter_wood_smallGuns, 1, global.GUI_width * 0.65, global.GUI_height * 0.4, 2, 2, 0, c_white, 1);
            break;
        }
        
        
        // Slot 2
        draw_text_transformed(global.GUI_width * 0.65, global.GUI_height * 0.5, "Slot 2", 1.2, 1.2, 0);
        if (device_mouse_x_to_gui(0) &lt; global.GUI_width * 0.65 + 28 &amp;&amp;
        device_mouse_x_to_gui(0) &gt; global.GUI_width * 0.65 - 28 &amp;&amp;
        device_mouse_y_to_gui(0) &lt; global.GUI_height * 0.55 + 28 &amp;&amp;
        device_mouse_y_to_gui(0) &gt; global.GUI_height * 0.55 - 28)
        {
            draw_sprite_ext(spr_button, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (_equippedSlot[1] != "")
                {
                    _equippedSlot[1] = "";
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_button, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
        }
    
        switch (_equippedSlot[1])
        {
            default:
            break;
            
            case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 2, 2, 0, c_white, 1);
            break;
            
            case "AK-47":
            draw_sprite_ext(shooter_wood_smallGuns, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 2, 2, 0, c_white, 1);
            break;
        }
    }
}


// Resetting draw fonts to its original
draw_set_font(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MainMenuStructure.b_solo == true)
{
    draw_self();
    draw_set_font(fnt_UIName);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(make_color_rgb(224,255,255));
    
    draw_text_transformed(x, y, "Weapons", 1.2, 1.2, 0);
    
    draw_set_font(-1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
