<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Enemy_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Currency multiplier every time it dies
f_multiplierLoot = random_range(0.3, 0.5);
i_loot = 0;

// Knockback timer and physics based calculation
b_isKnockback = false;
knockback_direction = 0;
f_knockback_timer = 0;
f_maxKnockback_time = 1;
f_knockback_speed = 0;
// Knock back distance on enemies upon hitting Ammo
knockback_acceleration = 3;
ammo_onhit_x = 0;

state = e_state.idle;
vsp = 0;
hsp = 0;
HP = 100;
maxHP = 100;
damage = 0;
pc = 0;

switch(Spawner.wave)
{
    case 1:
        maxHP = 100;
        HP = maxHP;
        damage = 10;
    break;
    case 2:
        maxHP = 110;
        HP = maxHP;
        damage = 10;
    break;
    case 3:
        maxHP = 120;
        HP = maxHP;
        damage = 20;
    break;
    case 4:
        maxHP = 130;
        HP = maxHP;
        damage = 30;
    break;
    case 5:
        maxHP = 140;
        HP = maxHP;
        damage = 40;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 10/60;
pc = (HP / maxHP) * 100;

switch (state)
{
    case e_state.idle:
    {   
        grid = mp_grid_create(16,16,room_width/32,room_height/32,32,32);
        path = path_add();
        mp_grid_add_instances(path,Wall,true);
        mp_grid_add_instances(path,Avoid,true);
        mp_grid_path(grid,path,x,y,Objective.x,Objective.y,false);
        
        if (b_isKnockback == true)
        {
            if (position_meeting(x - f_knockback_speed, y, Wall))
            {
                f_knockback_timer = 0;
                x = x + sign(ammo_onhit_x - x) * 20;
                f_knockback_speed = 0;
                b_isKnockback = false;
            }
            else
            {
                x -= f_knockback_speed;
            }
        }
        
        if (distance_to_object(Player) &lt; 94) 
        {
            path_end();
            state = e_state.chase;
        }
            
        if(place_meeting(x ,y + 1,Wall)== true)
        {
            path_start(path,2,"",false);
            gravity = 0;
        }
        if(place_meeting(x,y,Wall)== false)
        {
            path_end();
            gravity = 0.2;
        }
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=Enemy_left;
        
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=Enemy_right;
        }
    }
    break;
    case e_state.chase:
    {       
        dir = sign(Player.x - x);
        hsp = (dir * 2);
        vsp = (min(7,vsp+0.05));
        
        if (b_isKnockback == true)
        {
            if (position_meeting(x - f_knockback_speed, y, Wall) || position_meeting(x - f_knockback_speed, y + 1, Wall))
            {
                f_knockback_timer = 0;
                x = x + sign(ammo_onhit_x - x) * 20;
                f_knockback_speed = 0;
                b_isKnockback = false;
            }
            
            else
            {
                x -= f_knockback_speed;
            }            
        }
        
        grid = mp_grid_create(16,16,room_width/32,room_height/32,32,32);
        path = path_add();
        mp_grid_add_instances(path,Wall,true);
        mp_grid_add_instances(path,Avoid,true);
        mp_grid_path(grid,path,x,y,Player.x,Player.y + 1,false);
        
        if (distance_to_object(Player) &gt; 128)
        {
            path_end();
            state = e_state.idle;
        }
        if(place_meeting(x,y + 1,Wall)== true)
        {
            path_start(path,2,"",false);
            gravity = 0;
        }
        if(place_meeting(x,y,Wall)== false)
        {
            path_end();
            gravity = 0.2;
        }
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=Enemy_left;
        
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=Enemy_right;
        }
        
    }
    break;
    case e_state.dying:
    {
        path_end();
        direction = point_direction(x, y, Player.x, Player.y);
        speed = 0;
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=Enemy_dying_left;
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=Enemy_dying_right;
        }
        if(image_index &gt;= 7)
        {
            i_loot = round(f_multiplierLoot * global.i_baseLoot);
            global.i_currency += i_loot;
            instance_destroy();
        }
    }
    break;
}

//Horizontal Collision
if (place_meeting(round(x+hsp),round(y),Wall))
{
    while(!place_meeting(round(x+sign(hsp)),round(y),Wall)) x += sign(hsp);
    hsp = 0;
}

x += hsp;


//Vertical Collision
if (place_meeting(round(x),round(y+vsp),Wall))
{
    while(!place_meeting(round(x),round(y+sign(vsp)),Wall)) y += sign(vsp);
    vsp = 0;
}
y += vsp;

if(place_meeting(x,y,Handgun_Ammo))
{

    HP -= Handgun_Ammo.i_damage;

    with (Handgun_Ammo)
    {
        f_bullet_hspeed = 0;
        Enemy.ammo_onhit_x = x;

        instance_create(x, y, AmmoExplosion);
        AmmoExplosion.image_xscale *= 0.5;
        AmmoExplosion.image_yscale *= 0.5;
        instance_destroy();    
    }
    
    if (b_isKnockback == false)
    {
        b_isKnockback = true;
    }
    
    else
    {
        f_knockback_timer = 1;
    }
    
    if(HP &lt;= 0)
    {
        path_end();
        speed = 0;
        state = e_state.dying;
    }
}

if (b_isKnockback == true)
{
        // Knockback everytime it is hit by a bullet
        f_knockback_timer = f_knockback_timer + (1 / room_speed);
        knockback_direction = sign(ammo_onhit_x - x);
        
        f_knockback_speed = knockback_acceleration * (f_maxKnockback_time - f_knockback_timer) * knockback_direction;
}

if (f_knockback_timer &gt;= f_maxKnockback_time)
{
    f_knockback_timer = 0;
    f_knockback_speed = 0;
    b_isKnockback = false;
}

if(place_meeting(x,y,Objective))
{
    Objective.health -= 10;
    instance_create(x,y,EnemyExplode);
    instance_destroy();
}
if(Spawner.waveTime &gt;= 60)
{
    instance_create(x,y,EnemyExplode);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x - 30,y - 40, x+ 30, y - 50, HP, c_black, c_red, c_lime, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
