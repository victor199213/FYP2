<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TmpEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = e_state.idle;
vsp = 0;
hsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state)
{
    case e_state.idle:
    {   
        if (distance_to_object(Player) &lt; 94) 
        {
            state = e_state.chase;
        }
        grid = mp_grid_create(32,16,room_width/32,room_height/32,32,32);
        path = path_add();
        mp_grid_add_instances(path,Wall,true);
        mp_grid_path(grid,path,x,y,Objective.x,Objective.y,true);
            
        if(place_meeting(x,y + 1,Wall)== true)
        {
            gravity = 0.2;
            path_start(path,1,"",false);
        }
        else
        {
            path_end();
        }
    }
    break;
    case e_state.chase:
    {
        dir = sign(obj_player.x - x);
        hsp = dir * 2;
        vsp = (min(7,vsp+0.05));
        if (distance_to_object(Player) &gt; 128)
        {
            state = e_state.idle;
        }
    }
    break;
}

//Horizontal Collision
if (place_meeting(round(x+hsp),round(y),Wall))
{
    while(!place_meeting(round(x+sign(hsp)),round(y),Wall)) x += sign(hsp);
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(round(x),round(y+vsp),Wall))
{
    while(!place_meeting(round(x),round(y+sign(vsp)),Wall)) y += sign(vsp);
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
