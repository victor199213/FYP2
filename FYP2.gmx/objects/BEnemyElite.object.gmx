<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>BElite_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Currency multiplier every time it dies
f_multiplierLoot = random_range(0.3, 0.5);
i_loot = 0;

// Knockback timer and physics based calculation
b_isKnockback = false;
knockback_direction = 0;
f_knockback_timer = 0;
f_maxKnockback_time = 1;
f_knockback_speed = 0;
// Knock back distance on enemies upon hitting Ammo
knockback_acceleration = 10;
ammo_onhit_x = 0;

state = e_state.idle;
vsp = 0;
hsp = 0;
HP = 100;
maxHP = 100;
damage = 10;
pc = 0;
seconds = 0;

path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 10/60;
pc = (HP / maxHP) * 100;
randomize();

switch (state)
{
    case e_state.idle:
    {   
        mp_grid_add_instances(path,Wall,true);
        mp_grid_add_instances(path,Avoid,true);
        mp_grid_path(global.grid,path,x,y,BObjective.x,BObjective.y,false);
        
        if (b_isKnockback == true)
        {
            if (position_meeting(x - f_knockback_speed, y, Wall))
            {
                f_knockback_timer = 0;
                x = x + sign(ammo_onhit_x - x) * 30;
                f_knockback_speed = 0;
                
                if(place_meeting(x,y,Wall)== false)
                {
                    path_end();
                    gravity = 0.2;
                }
                
                b_isKnockback = false;
                
            }
            else
            {
                x -= f_knockback_speed;
            }
        }
        
        if (R_Player.b_deadAnim == false &amp;&amp; R_Player.b_isDead == false)
        {
            if (distance_to_object(R_Player) &lt; 94) 
            {
                path_end();
                switch(irandom_range(1,2))
                {
                    case 1:
                    {
                        state = e_state.chase;
                    }
                    break;
                    case 2:
                    {
                        speed = 0;
                        state = e_state.shoot;
                    }
                    break
                }
            }
        }
            
        if(place_meeting(x ,y + 1,Wall)== true)
        {
            path_start(path,2,"",false);
            gravity = 0;
        }
        if(place_meeting(x,y,Wall)== false)
        {
            path_end();
            gravity = 0.2;
        }
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=BElite_left;
        
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=BElite_right;
        }
    }
    break;
    case e_state.chase:
    {
        mp_grid_add_instances(path,Wall,true);
        mp_grid_add_instances(path,Avoid,true);
        
        dir = sign(R_Player.x - x);
        hsp = (dir * 2);
        vsp = (min(7,vsp+0.05));
        mp_grid_path(global.grid,path,x,y,R_Player.x,R_Player.y + 1,false);
        
        if (b_isKnockback == true)
        {
            if (position_meeting(x - f_knockback_speed, y, Wall))
            {
                f_knockback_timer = 0;
                x = x + sign(ammo_onhit_x - x) * 30;
                f_knockback_speed = 0;
                
                if(place_meeting(x,y,Wall)== false)
                {
                    path_end();
                    gravity = 0.2;
                }
                
                b_isKnockback = false;
            }
            
            else
            {
                x -= f_knockback_speed;
            }            
        }
               
        if (distance_to_object(R_Player) &gt; 128 ||
            R_Player.b_deadAnim == true ||
            R_Player.b_isDead == true)
        {
            path_end();
            state = e_state.idle;
        }
        if(place_meeting(x,y + 1,Wall)== true)
        {
            path_start(path,2,"",false);
            gravity = 0;
        }
        if(place_meeting(x,y,Wall)== false)
        {
            path_end();
            gravity = 0.2;
        }
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=BElite_left;
        
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=BElite_right;
        }
    }
    break;
    case e_state.shoot:
    {
        path_end();
        seconds += 1 / room_speed;
        dir = sign(R_Player.x - x);
        hsp = dir * 2;
        vsp = (min(7,vsp+0.05));
        
        if(seconds &gt;= 0.5)
        {
            instance_create(x,y,BEnemyEliteProObj);
            seconds = 0;
        }
        
        if(place_meeting(x ,y + 1,Wall)== true)
        {
            speed = 0;
            direction = point_direction(x, y, R_Player.x, R_Player.y);
            gravity = 0;
        }
                
        if (b_isKnockback == true)
        {
            if (position_meeting(x - f_knockback_speed, y, Wall))
            {
                f_knockback_timer = 0;
                x = x + sign(ammo_onhit_x - x) * 20;
                f_knockback_speed = 0;
                
                if(place_meeting(x,y,Wall)== false)
                {
                    path_end();
                    state = e_state.idle;
                    gravity = 0.2;
                }
                b_isKnockback = false;
            }
            
            else
            {
                x -= f_knockback_speed;
            }    
        }
               
        if (distance_to_object(R_Player) &gt; 128 ||
            R_Player.b_deadAnim == true ||
            R_Player.b_isDead == true)
        {
            path_end();
            state = e_state.idle;
        }

        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=BElite_left;
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=BElite_right;
        }
    }
    break;
    case e_state.dying:
    {
        path_end();
        direction = point_direction(x, y, R_Player.x, R_Player.y);
        speed = 0;
        if(direction &gt; 90 &amp;&amp; direction &lt; 270)
        {
            sprite_index=BElite_dying_left;
        }
        if(direction &lt; 90 &amp;&amp; direction &gt; -90)
        {
            sprite_index=BElite_dying_right;
        }
        if(image_index &gt;= 6)
        {
            i_loot = round(f_multiplierLoot * global.i_baseLoot);
            global.i_currency += i_loot;
            instance_destroy();
        }
    }
    break;
}

//Horizontal Collision
if (place_meeting(round(x+hsp),round(y),Wall))
{
    while(!place_meeting(round(x+sign(hsp)),round(y),Wall)) x += sign(hsp);
    hsp = 0;
}

x += hsp;


//Vertical Collision
if (place_meeting(round(x),round(y+vsp),Wall))
{
    while(!place_meeting(round(x),round(y+sign(vsp)),Wall)) y += sign(vsp);
    vsp = 0;
}
y += vsp;

if (place_meeting(x - 2, y - 2, R_Player_Handgun_Ammo) ||
    place_meeting(x + 2, y - 2, R_Player_Handgun_Ammo) ||
    place_meeting(x - 2 ,y + 2, R_Player_Handgun_Ammo) ||
    place_meeting(x + 2,y + 2, R_Player_Handgun_Ammo))
    {
        if (HP &gt; R_Player_Handgun_Ammo.i_damage)
        {
            HP -= R_Player_Handgun_Ammo.i_damage;
            if (b_isKnockback == false)
            {
                b_isKnockback = true;
            }
            
            else
            {
                f_knockback_timer = 0;
            }
        }
        
        else
        {
            path_end();
            HP = 0;
            speed = 0;
            state = e_state.dying;
        }
    }

if (b_isKnockback == true)
{
    // Knockback everytime it is hit by a bullet
    f_knockback_timer = f_knockback_timer + (1 / room_speed);
    knockback_direction = sign(ammo_onhit_x - x);
    
    f_knockback_speed = knockback_acceleration * (f_maxKnockback_time - f_knockback_timer) * knockback_direction;
    if (f_knockback_timer &gt;= f_maxKnockback_time)
    {
        f_knockback_timer = 0;
        f_knockback_speed = 0;
        b_isKnockback = false;
    }
}

if(place_meeting(x,y,BObjective))
{
    BObjective.health -= 10;
    instance_destroy();
    instance_create(x,y,EnemyExplode);
}

if(PVPgui.sec &lt; 1)
{
    instance_create(x,y,EnemyExplode);
    instance_destroy();
}

if(place_meeting(x,y,wall2obj))
{
    HP = 0;
    state = e_state.dying;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x - 30,y - 40, x+ 30, y - 50, HP, c_black, c_red, c_lime, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
