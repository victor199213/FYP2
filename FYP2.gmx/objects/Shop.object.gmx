<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
There will be 3 slots in total available for the necessary upgrades
The first 2 slots will go to equipment Upgrades
The 3rd slot goes to player Upgrades
*/
i_selectedSlot = 1;
/*
There will be pages for player slot Upgrade
*/
i_playerSlotPage = 1;
i_totalEquipments = ds_list_size(global.EquipmentList);
equipmentNames[0] = global._equipment[0];
equipmentNames[1] = global._equipment[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setting the fonts for the shop
// The background for Shop
draw_sprite_ext(spr_background_inv, 0, global.GUI_width * 0.5, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 1);


// Options for different types of upgrade
// First equipment in the EquipmentList will go to the first slot in the shop
if (i_selectedSlot == 1)
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 0.5);
    
    switch (equipmentNames[0])
    {
        default:
        break;
        
        // When the first equipment is Handgun
        case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 3, 3, 0, c_white, 1);
            // Giving the available options for upgrades, along with the name of the Item
            // Name of the weapon in first slot
            draw_sprite_ext(spr_hud2_nametag, 0, global.GUI_width * 0.55, global.GUI_height * 0.325, 2, 2, 0, c_white, 1);
            draw_set_font(fnt_UIName);
            draw_set_color(c_white);
            draw_text(global.GUI_width * 0.525, global.GUI_height * 0.31, equipmentNames[0]);
            
            // Available upgrades
            // First Option           
            if (Handgun.i_maxMagazineLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: " + string(Handgun.i_maxMagazineLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.45, "Cost: " + string(Handgun.i_maxMagazineUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.475, global.magazine_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.45 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.45 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_maxMagazineUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_maxMagazineUpgradeCost;
                            Handgun.i_maxMagazineLevel += 1;
                            Handgun.i_maxMagazineUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                            Handgun.i_maxMagazine = Handgun.i_baseMagazine + Handgun.i_maxMagazineIncrement;                        
                        }
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: Max");                
            }
            
            //Second Option
            if (Handgun.i_damageLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: " + string(Handgun.i_damageLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.55, "Cost: " + string(Handgun.i_damageUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.575, global.damage_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.55 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.55 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_damageUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_damageUpgradeCost;
                            
                            Handgun.i_damageLevel += 1;
                            Handgun.i_damageUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                            Handgun.i_damage = Handgun.i_baseDamage + ((Handgun.i_damageLevel - 1) * Handgun.i_damageIncrement);
                        }
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                }           
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: Max");            
            }
                
            //Third Option
            if (Handgun.i_cooldownLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: " + string(Handgun.i_cooldownLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.65, "Cost: " + string(Handgun.i_cooldownUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.675, global.cooldown_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.65 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.65 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_damageUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_cooldownUpgradeCost;
                        
                            Handgun.i_cooldownLevel += 1;
                            Handgun.i_cooldownUpgradeCost = round(Handgun.i_cooldownUpgradeCost * 1.5);
                            Handgun.f_cooldown = Handgun.f_basecooldown - ((Handgun.i_cooldownLevel - 1) * Handgun.f_cooldownIncrement);
                        }                        
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: Max");
            }
            
        break;
    }
}

else
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 1);
    switch (equipmentNames[0])
    {
        default:
        break;
        
        case "Handgun":
        draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 3, 3, 0, c_white, 1);
        break;
    }
} 

// Slot 2
if (i_selectedSlot == 2)
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 0.5);
    switch (equipmentNames[1])
    {
        default:
        break;
        
        // When the first equipment is Handgun
        case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.55, 3, 3, 0, c_white, 1);
            // Giving the available options for upgrades, along with the name of the Item
            // Name of the weapon in first slot
            draw_sprite_ext(spr_hud2_nametag, 0, global.GUI_width * 0.55, global.GUI_height * 0.325, 2, 2, 0, c_white, 1);
            draw_set_font(fnt_UIName);
            draw_set_color(c_white);
            draw_text(global.GUI_width * 0.525, global.GUI_height * 0.31, equipmentNames[1]);
            
            // Available upgrades
            // First Option           
            if (Handgun.i_maxMagazineLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: " + string(Handgun.i_maxMagazineLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.45, "Cost: " + string(Handgun.i_maxMagazineUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.475, global.magazine_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.45 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.45 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_maxMagazineUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_maxMagazineUpgradeCost;
                            Handgun.i_maxMagazineLevel += 1;
                            Handgun.i_maxMagazineUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                            Handgun.i_maxMagazine = Handgun.i_baseMagazine + Handgun.i_maxMagazineIncrement;                        
                        }
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: Max");                
            }
            
            //Second Option
            if (Handgun.i_damageLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: " + string(Handgun.i_damageLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.55, "Cost: " + string(Handgun.i_damageUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.575, global.damage_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.55 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.55 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_damageUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_damageUpgradeCost;
                            
                            Handgun.i_damageLevel += 1;
                            Handgun.i_damageUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                            Handgun.i_damage = Handgun.i_baseDamage + ((Handgun.i_damageLevel - 1) * Handgun.i_damageIncrement);
                        }
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                }           
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: Max");            
            }
                
            //Third Option
            if (Handgun.i_cooldownLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: " + string(Handgun.i_cooldownLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.65, "Cost: " + string(Handgun.i_cooldownUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.675, global.cooldown_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.65 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.65 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                        if (global.i_currency &gt;= Handgun.i_damageUpgradeCost)
                        {
                            global.i_currency = global.i_currency - Handgun.i_cooldownUpgradeCost;
                        
                            Handgun.i_cooldownLevel += 1;
                            Handgun.i_cooldownUpgradeCost = round(Handgun.i_cooldownUpgradeCost * 1.5);
                            Handgun.f_cooldown = Handgun.f_basecooldown - ((Handgun.i_cooldownLevel - 1) * Handgun.f_cooldownIncrement);
                        }                        
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: Max");
            }
            
        break;
    }
}

else
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 1);
    switch (equipmentNames[1])
    {
        default:
        break;
        
        case "Handgun":
        draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 3, 3, 0, c_white, 1);
        break;
    }
}

// Slot 3
// Slot 3 goes to player upgrades
if (i_selectedSlot == 3)
{       
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1.5, 1.5, 0, c_white, 0.5);
    // Giving the available options for upgrades, along with the name of the Player
    // Name of the weapon in first slot
    draw_sprite_ext(spr_hud2_nametag, 0, global.GUI_width * 0.55, global.GUI_height * 0.325, 2, 2, 0, c_white, 1);
    draw_set_font(fnt_UIName);
    draw_set_color(c_white);
    draw_text(global.GUI_width * 0.515, global.GUI_height * 0.31, "Player One");
    
    /*
    There are 2 pages in the player upgrade section.
    Players can flip through the page through clicking the button at the lower right corner of the shop page
    */
   
    switch (i_playerSlotPage)
    {
        default:
        break;
        
        // Page One
        case 1:
        if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.6 - 12) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.6 + 12) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.385 - 13) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.385 + 13))
        {
            draw_sprite_ext(spr_arrow_down, 1, global.GUI_width * 0.6, global.GUI_height * 0.385, 0.5, 0.5, 0, c_white, 1);
            // Sensing the position of mouse upon clicking to change the selected slot of available upgrades
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (i_playerSlotPage != 2)
                {
                    i_playerSlotPage = 2;                
                }            
            }      
        }
        
        else
        {
            draw_sprite_ext(spr_arrow_down, 0, global.GUI_width * 0.6, global.GUI_height * 0.385, 0.5, 0.5, 0, c_white, 1);
        }
 
        draw_set_font(fnt_UIName);
        draw_text(global.GUI_width * 0.52, global.GUI_height * 0.37, "Page One");
        /*
        Page one Player Upgrade
        First Option: Max Health
        */
        if (Player.i_maxHealthLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Max Health Level: " + string(Player.i_maxHealthLevel));
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.45, "Cost: " + string(Player.i_maxHealthUpgradeCost));
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.475, global.maxhealth_description);
            
            if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.45 - 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.45 + 17))
            {
                draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                if (device_mouse_check_button_pressed(0, mb_left))
                {
                    // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                    if (global.i_currency &gt;= Player.i_maxHealthUpgradeCost)
                    {
                        global.i_currency = global.i_currency - Player.i_maxHealthUpgradeCost;
                        Player.i_maxHealthLevel += 1;
                        Player.i_maxHealthUpgradeCost = round(Player.i_maxHealthUpgradeCost * 1.5);
                        Player.i_maxHealth = Player.i_baseMaxHealth + ((Player.i_maxHealthLevel - 1) * Player.i_maxHealthIncrement);                        
                    }
                }
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
            }
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Max Health Level: Max");                
        }
        /*
        Page one Player Upgrade
        Second Option: Damage Multiplier
        */
        if (Player.i_maxDamageMultiplierLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Multiplier Level: " + string(Player.i_maxDamageMultiplierLevel));
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.55, "Cost: " + string(Player.i_maxDamageMultiplierCost));
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.575, global.maxdamage_description);
        
            if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.55 - 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.55 + 17))
            {
                draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                if (device_mouse_check_button_pressed(0, mb_left))
                {
                    // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                    if (global.i_currency &gt;= Player.i_maxDamageMultiplierCost)
                    {
                        global.i_currency = global.i_currency - Player.i_maxDamageMultiplierCost;                        
                        Player.i_maxDamageMultiplierLevel += 1;
                        Player.i_maxDamageMultiplierCost = round(Player.i_maxDamageMultiplierCost * 1.5);
                        Player.f_damageMultiplier = Player.f_baseDamageMultiplier + ((Player.i_maxDamageMultiplierLevel - 1) * Player.f_damageMultiplierIncrement);
                    }
                }
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
            }           
        }
        
        else
        {
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: Max");            
        }
        
        /*
        Page one Player Upgrade
        Third Option: Movement Speed
        */
        if (Player.f_moveSpeedLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Move Speed Level: " + string(Player.f_moveSpeedLevel));
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.65, "Cost: " + string(Player.i_moveSpeedUpgradeCost));
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.675, global.maxmovespeed_description);
        
            if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.65 - 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.65 + 17))
            {
                draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                if (device_mouse_check_button_pressed(0, mb_left))
                {
                    // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                    if (global.i_currency &gt;= Player.i_moveSpeedUpgradeCost)
                    {
                        global.i_currency = global.i_currency - Player.i_moveSpeedUpgradeCost;
                    
                        Player.f_moveSpeedLevel += 1;
                        Player.i_moveSpeedUpgradeCost = round(Player.i_moveSpeedUpgradeCost * 1.5);
                        Player.f_moveSpeed = Player.f_baseMoveSpeed + ((Player.f_moveSpeedLevel - 1) * Player.f_moveSpeedIncrement);
                    }                        
                }
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
            }            
        }
        
        else
        {
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Move Speed Level: Max");
        }        
        break;
        
        case 2:
        if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.6 - 12) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.6 + 12) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.385 - 13) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.385 + 13))
        {
            draw_sprite_ext(spr_arrow_up, 1, global.GUI_width * 0.6, global.GUI_height * 0.385, 0.5, 0.5, 0, c_white, 1);
            // Sensing the position of mouse upon clicking to change the selected slot of available upgrades
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (i_playerSlotPage != 1)
                {
                    i_playerSlotPage = 1;                
                }
            }    
        }
        
        else
        {
            draw_sprite_ext(spr_arrow_up, 0, global.GUI_width * 0.6, global.GUI_height * 0.385, 0.5, 0.5, 0, c_white, 1);
        }
        draw_set_font(fnt_UIName);
        draw_text(global.GUI_width * 0.52, global.GUI_height * 0.37, "Page Two");
        
                /*
        Page Two Player Upgrade
        First Option: Armour
        */
        if (Player.i_maxArmourLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Max Armour Level: " + string(Player.i_maxArmourLevel));
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.45, "Cost: " + string(Player.i_maxArmourUpgradeCost));
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.475, global.maxarmour_description);
            
            if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.45 - 17) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.45 + 17))
            {
                draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                if (device_mouse_check_button_pressed(0, mb_left))
                {
                    // Minus the current upgrade cost from the player's wallet if the player has enough currency to upgrade
                    if (global.i_currency &gt;= Player.i_maxArmourUpgradeCost)
                    {
                        global.i_currency = global.i_currency - Player.i_maxArmourUpgradeCost;
                        Player.i_maxArmourLevel += 1;
                        Player.i_maxArmourUpgradeCost = round(Player.i_maxArmourUpgradeCost * 1.5);
                        Player.f_armour = Player.f_baseArmour + ((Player.i_maxArmourLevel - 1) * Player.f_armourIncrement);                        
                    }
                }
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
            }
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Max Armour Level: Max");                
        }
        break;
    }

}

else
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1.5, 1.5, 0, c_white, 1); 
}
draw_sprite_ext(Daniel_Idle_Right, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);

// Setting back to the original fonts to prevent further change of fonts
draw_set_font(-1);
draw_set_color(c_black);

if (device_mouse_check_button_pressed(0, mb_left))
{
    if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.375 - 50) &amp;&amp; device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.375 + 50))
    {
        // Change to slot 1
        if (device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.35 - 50) &amp;&amp; device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.35 + 50))
        {
            if (i_selectedSlot != 1)
            {
                i_selectedSlot = 1;
            }
        }
        
        // Change to slot 3
        if (device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.65 - 50) &amp;&amp; device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.65 + 50))
        {
            if (i_selectedSlot != 3)
            {
                i_selectedSlot = 3;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
