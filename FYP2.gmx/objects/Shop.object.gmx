<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_background_inv</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creation of variables for the shop
image_xscale = 2;
image_yscale = 2;
_sprite_size_x = sprite_width;
_sprite_size_y = sprite_height;
x = room_width * 0.5;
y = room_height * 0.5;

/*
There will be 3 slots in total available for the necessary upgrades
The first 2 slots will go to equipment Upgrades
The 3rd slot goes to player Upgrades
The 4th slot goes to item purchases
*/
i_selectedSlot = 1;
/*
There will be pages for player slot Upgrade
*/
i_playerSlotPage = 1;

// Equipment variables
i_totalEquipments = ds_list_size(global.EquipmentList);
equipmentNames[0] = global._equipment[0];
equipmentNames[1] = global._equipment[1];

// Variables created for item purchases and its cost
i_itemSlotPage = 1;
i_equipOneMagazineCost = 0;
i_equipTwoMagazineCost = 0;

switch (equipmentNames[0])
{
    default:
    break;
    
    case "Handgun":
    i_equipOneMagazineCost = 5;
    break;
    
    case "AK-47":
    i_equipOneMagazineCost = 12;
    break;
    
    case "Rocket":
    i_equipOneMagazineCost = 50;
    break;
}

switch (equipmentNames[1])
{
    default:
    break;
    
    case "Handgun":
    i_equipTwoMagazineCost = 5;
    break;
    
    case "AK-47":
    i_equipTwoMagazineCost = 12;
    break;
    
    case "Rocket":
    i_equipTwoMagazineCost = 50;
    break;
}

_slotOne_posy = global.GUI_height * 0.35;
_slotTwo_posy = global.GUI_height * 0.45;
_slotThree_posy = global.GUI_height * 0.55;
_slotFour_posy = global.GUI_height * 0.65;

_allSlots_posx = global.GUI_width * 0.375;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slots for each Option available
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
        break;
        
        case 2:
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
        break;
        
        case 3:
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
        break;
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
        break;
        
        case 2:
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
        break;
        
        case 3:
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
        break;
        
        case 4:
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1, 1.5, 1.5, 0, c_white, 1);
            draw_sprite_ext(spr_slot_inv, 2, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Icons for each slot
// If only 1 equipped weapon
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
    {
        switch (equipmentNames[0])
        {
            default:
            break;
            
            case "Handgun":
                draw_sprite_ext(shooter_wood_smallGuns, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2.5, 2.5, 0, c_white, 1);
            break;
            
            case "AK-47":
                draw_sprite_ext(shooter_wood_smallGuns, 1, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2.5, 2.5, 0, c_white, 1);
            break;
            
            case "Rocket":
                draw_sprite_ext(shooter_bigGuns, 5, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2, 2, 0, c_white, 1);
            break;
        }
    }
    
    else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
    {
        switch (equipmentNames[1])
        {
            default:
            break;
            
            case "Handgun":
                draw_sprite_ext(shooter_wood_smallGuns, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2.5, 2.5, 0, c_white, 1);
            break;
            
            case "AK-47":
                draw_sprite_ext(shooter_wood_smallGuns, 1, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2.5, 2.5, 0, c_white, 1);
            break;
            
            case "Rocket":
                draw_sprite_ext(shooter_bigGuns, 5, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.25, 2, 2, 0, c_white, 1);
            break;
        }
    }
    
    
    if (Player.b_daniel_sprite == true)
    {
        draw_sprite_ext(Daniel_Idle_Right, 0, x - _sprite_size_x * 0.4, y - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    else if (Player.b_terry_sprite == true)
    {
        draw_sprite_ext(Terry_Idle_Right, 0, x - _sprite_size_x * 0.4, y - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    else if (Player.b_keith_sprite == true)
    {
        draw_sprite_ext(Keith_Idle_Right, 0, x - _sprite_size_x * 0.4, y - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    draw_sprite_ext(CoinChest, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.25, 1.5, 1.5, 0, c_white, 1);
}

// If 2 equipped weapons
else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    switch (equipmentNames[0])
    {
        default:
        break;
        
        case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 2.5, 2.5, 0, c_white, 1);
        break;
        
        case "AK-47":
            draw_sprite_ext(shooter_wood_smallGuns, 1, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 2.5, 2.5, 0, c_white, 1);
        break;
        
        case "Rocket":
            draw_sprite_ext(shooter_bigGuns, 5, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.3, 2, 2, 0, c_white, 1);
        break;
    }
    
    switch (equipmentNames[1])
    {
        default:
        break;
        
        case "Handgun":
            draw_sprite_ext(shooter_wood_smallGuns, 0, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 2.5, 2.5, 0, c_white, 1);
        break;
        
        case "AK-47":
            draw_sprite_ext(shooter_wood_smallGuns, 1, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 2.5, 2.5, 0, c_white, 1);
        break;
        
        case "Rocket":
            draw_sprite_ext(shooter_bigGuns, 5, x - _sprite_size_x * 0.4, y - _sprite_size_y * 0.1, 2, 2, 0, c_white, 1);
        break;
    }
    
    if (Player.b_daniel_sprite == true)
    {
        draw_sprite_ext(Daniel_Idle_Right, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1 - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    else if (Player.b_terry_sprite == true)
    {
        draw_sprite_ext(Terry_Idle_Right, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1 - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    else if (Player.b_keith_sprite == true)
    {
        draw_sprite_ext(Keith_Idle_Right, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.1 - 8, 1.2, 1.2, 0, c_white, 1);
    }
    
    draw_sprite_ext(CoinChest, 0, x - _sprite_size_x * 0.4, y + _sprite_size_y * 0.3, 1.5, 1.5, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main Text for each slot
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_UIName);
draw_set_color(c_white);

draw_sprite_ext(spr_hud2_nametag, 0, x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, 4, 4, 0, c_white, 1);
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
        if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
        {
            switch (equipmentNames[0])
            {
                default:
                break;
                
                case "Handgun":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
                break;
                
                case "AK-47":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
                break;
                
                case "Rocket":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
                break;
            }
        }
        
        else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
        {
            switch (equipmentNames[1])
            {
                default:
                break;
                
                case "Handgun":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
                break;
                
                case "AK-47":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
                break;
                
                case "Rocket":
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
                break;
            }
        }
        break;
        
        case 2:
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, "Player's Upgrade", 1.5, 1.5, 0);
        break;
        
        case 3:
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, "Magazine &amp; Health", 1.5, 1.5, 0);
        break;
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
        switch (equipmentNames[0])
        {
            default:
            break;
            
            case "Handgun":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
            break;
            
            case "AK-47":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
            break;
            
            case "Rocket":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[0], 1.5, 1.5, 0);
            break;
        }
        break;
        
        case 2:
        switch (equipmentNames[1])
        {
            default:
            break;
            
            case "Handgun":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
            break;
            
            case "AK-47":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
            break;
            
            case "Rocket":
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, equipmentNames[1], 1.5, 1.5, 0);
            break;
        }
        break;
        
        case 3:
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, "Player's Upgrade", 1.5, 1.5, 0);
        break;
        
        case 4:
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.4, "Magazine &amp; Health", 1.5, 1.5, 0);
        break;
    }
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_font(-1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Upgrade Text for each slot
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_white);
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
        if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
        {
            switch (equipmentNames[0])
            {
                default:
                break;
                
                case "Handgun":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Handgun_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Handgun_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Handgun_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Handgun_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Handgun_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Handgun_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
                
                case "AK-47":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.AK47_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.AK47_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.AK47_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.AK47_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.AK47_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.AK47_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
                
                case "Rocket":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Rocket_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Rocket_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Rocket_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Rocket_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Rocket_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Rocket_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
            }
        }
        
        else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
        {
            switch (equipmentNames[1])
            {
                default:
                break;
                
                case "Handgun":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Handgun_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Handgun_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Handgun_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Handgun_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Handgun_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Handgun_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
                
                case "AK-47":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.AK47_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.AK47_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.AK47_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.AK47_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.AK47_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.AK47_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
                
                case "Rocket":
                // Upgrade Option One: Max magazine
                if (WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Rocket_maxMagazineLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Rocket_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Two: Ammo Damage
                if (WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Rocket_damageLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Rocket_damageUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
                }
                
                // Upgrade Option Three: Fire-rate
                if (WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Rocket_cooldownLevel), 2, 2, 0);
                    
                    draw_set_font(fnt_UIDescriptiontwo);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Rocket_cooldownUpgradeCost), 1.5, 1.5, 0);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
                }
                break;
            }
        }
        break;
        
        case 2:
        // Player Upgrade
        // Upgrade Option: Max Health
        if (Player.i_maxHealthLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Max Health Level: " + string(Player.i_maxHealthLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(Player.i_maxHealthUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_HealthUpgradeInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "max Health Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Two: Multiplier Level
        if (Player.i_maxDamageMultiplierLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Multiplier Level: " + string(Player.i_maxDamageMultiplierLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(Player.i_maxDamageMultiplierCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_MaxDamageInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Multiplier Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Three: Movement Speed
        if (Player.f_moveSpeedLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Move Speed Level: " + string(Player.f_moveSpeedLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(Player.i_moveSpeedUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_MaxSpeedInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Move Speed Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Four: Armour
        if (Player.i_maxArmourLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.3, "Move Speed Level: " + string(Player.i_maxArmourLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.34, "Cost: " + string(Player.i_maxArmourUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.38, c_MaxArmourInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.3, "Armour Level: Max", 2, 2, 0);
        }
        break;
        
        case 3:
        if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
        {
            switch (equipmentNames[0])
            {
                default:
                break;
                
                case "Handgun":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Handgun Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
                
                case "AK-47":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "AK-47 Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
                
                case "Rocket":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Rocket Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
            }
        }
        
        else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
        {
            switch (equipmentNames[1])
            {
                default:
                break;
                
                case "Handgun":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Handgun Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
                
                case "AK-47":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "AK-47 Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
                
                case "Rocket":
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Rocket Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
                break;
            }
        }
        
        draw_set_font(fnt_UIDescription);
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Health", 2, 2, 0);
        
        draw_set_font(fnt_UIDescriptiontwo);
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.06, "Cost: " + string(Player.i_healCost), 1.5, 1.5, 0);
        draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.02, c_RestoreHealth, 1.5, 1.5, 0);
        break;
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    switch (i_selectedSlot)
    {
        default:
        break;
        
        case 1:
        switch (equipmentNames[0])
        {
            default:
            break;
            
            case "Handgun":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Handgun_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Handgun_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Handgun_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Handgun_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Handgun_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Handgun_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
            
            case "AK-47":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.AK47_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.AK47_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.AK47_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.AK47_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.AK47_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.AK47_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
            
            case "Rocket":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Rocket_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Rocket_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Rocket_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Rocket_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Rocket_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Rocket_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
        }
        break;
    
        case 2:
        switch (equipmentNames[1])
        {
            default:
            break;
            
            case "Handgun":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Handgun_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Handgun_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Handgun_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Handgun_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Handgun_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Handgun_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
            
            case "AK-47":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.AK47_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.AK47_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.AK47_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.AK47_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.AK47_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.AK47_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
            
            case "Rocket":
            // Upgrade Option One: Max magazine
            if (WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: " + string(WeaponHandleObj.Rocket_maxMagazineLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(WeaponHandleObj.Rocket_maxMagazineUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_MaxMagazineInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Magazine Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Two: Ammo Damage
            if (WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: " + string(WeaponHandleObj.Rocket_damageLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(WeaponHandleObj.Rocket_damageUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_AmmoDamageInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Damage Level: Max", 2, 2, 0);
            }
            
            // Upgrade Option Three: Fire-rate
            if (WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: " + string(WeaponHandleObj.Rocket_cooldownLevel), 2, 2, 0);
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(WeaponHandleObj.Rocket_cooldownUpgradeCost), 1.5, 1.5, 0);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_CooldownInfo, 1.5, 1.5, 0);
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Fire-rate Level: Max", 2, 2, 0);
            }
            break;
        }
        break;
        
        case 3:
        // Player Upgrade
        // Upgrade Option: Max Health
        if (Player.i_maxHealthLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Max Health Level: " + string(Player.i_maxHealthLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.26, "Cost: " + string(Player.i_maxHealthUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.22, c_HealthUpgradeInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "max Health Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Two: Multiplier Level
        if (Player.i_maxDamageMultiplierLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Multiplier Level: " + string(Player.i_maxDamageMultiplierLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.06, "Cost: " + string(Player.i_maxDamageMultiplierCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y  - _sprite_size_y * 0.02, c_MaxDamageInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Multiplier Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Three: Movement Speed
        if (Player.f_moveSpeedLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Move Speed Level: " + string(Player.f_moveSpeedLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(Player.i_moveSpeedUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_MaxSpeedInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Move Speed Level: Max", 2, 2, 0);
        }
        
        // Upgrade Option Four: Armour
        if (Player.i_maxArmourLevel &lt;= Player.i_playerMaxUpgrade)
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.3, "Move Speed Level: " + string(Player.i_maxArmourLevel), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.34, "Cost: " + string(Player.i_maxArmourUpgradeCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.38, c_MaxArmourInfo, 1.5, 1.5, 0);
        }
        
        else
        {
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.3, "Armour Level: Max", 2, 2, 0);
        }
        break;
        
        case 4:
        switch (equipmentNames[0])
        {
            default:
            break;
            
            case "Handgun":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Handgun Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
            break;
            
            case "AK-47":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "AK-47 Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
            break;
            
            case "Rocket":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.3, "Rocket Magazine: " + string(Player.i_equipOneID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.26, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.22, c_Magazine, 1.5, 1.5, 0);
            break;
        }
    
        switch (equipmentNames[1])
        {
            default:
            break;
            
            case "Handgun":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Handgun Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.06, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.02, c_Magazine, 1.5, 1.5, 0);
            break;
            
            case "AK-47":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "AK-47 Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.06, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.02, c_Magazine, 1.5, 1.5, 0);
            break;
            
            case "Rocket":
            draw_set_font(fnt_UIDescription);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.1, "Rocket Magazine: " + string(Player.i_equipTwoID.i_magazine), 2, 2, 0);
            
            draw_set_font(fnt_UIDescriptiontwo);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.06, "Cost: " + string(i_equipOneMagazineCost), 1.5, 1.5, 0);
            draw_text_transformed(x + _sprite_size_x * 0.1, y - _sprite_size_y * 0.02, c_Magazine, 1.5, 1.5, 0);
            break;
        }
        
        draw_set_font(fnt_UIDescription);
        draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.1, "Health", 2, 2, 0);
        
        draw_set_font(fnt_UIDescriptiontwo);
        draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.14, "Cost: " + string(Player.i_healCost), 1.5, 1.5, 0);
        draw_text_transformed(x + _sprite_size_x * 0.1, y + _sprite_size_y * 0.18, c_RestoreHealth, 1.5, 1.5, 0);
        break;
    }
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_font(-1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Upgrade Purchase Icon One for each upgrade
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    // Option One Upgrades: Max Magazine Upgrades for guns (both), Player Max Health, Magazine Purchase 1
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.26 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.26 + 34))
    {
        draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.26, 2, 2, 0, c_white, 1);
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
                {
                    switch (equipmentNames[0])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_maxMagazineUpgradeCost;
                            WeaponHandleObj.Handgun_maxMagazineLevel += 1;
                            WeaponHandleObj.Handgun_maxMagazineUpgradeCost = round(WeaponHandleObj.Handgun_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_maxMagazine = WeaponHandleObj.Handgun_baseMagazine + (WeaponHandleObj.Handgun_maxMagazineLevel - 1) * WeaponHandleObj.Handgun_maxMagazineIncrement;
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_maxMagazineUpgradeCost;
                            WeaponHandleObj.AK47_maxMagazineLevel += 1;
                            WeaponHandleObj.AK47_maxMagazineUpgradeCost = round(WeaponHandleObj.AK47_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_maxMagazine = WeaponHandleObj.AK47_baseMagazine + (WeaponHandleObj.AK47_maxMagazineLevel - 1) * WeaponHandleObj.AK47_maxMagazineIncrement;                        
                        }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_maxMagazineUpgradeCost;
                            WeaponHandleObj.Rocket_maxMagazineLevel += 1;
                            WeaponHandleObj.Rocket_maxMagazineUpgradeCost = round(WeaponHandleObj.Rocket_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_maxMagazine = WeaponHandleObj.Rocket_baseMagazine + (WeaponHandleObj.Rocket_maxMagazineLevel - 1) * WeaponHandleObj.Rocket_maxMagazineIncrement;                        
                        }
                        break;
                    }
                }
                
                else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
                {
                    switch (equipmentNames[1])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_maxMagazineUpgradeCost;
                            WeaponHandleObj.Handgun_maxMagazineLevel += 1;
                            WeaponHandleObj.Handgun_maxMagazineUpgradeCost = round(WeaponHandleObj.Handgun_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_maxMagazine = WeaponHandleObj.Handgun_baseMagazine + (WeaponHandleObj.Handgun_maxMagazineLevel - 1) * WeaponHandleObj.Handgun_maxMagazineIncrement;
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_maxMagazineUpgradeCost;
                            WeaponHandleObj.AK47_maxMagazineLevel += 1;
                            WeaponHandleObj.AK47_maxMagazineUpgradeCost = round(WeaponHandleObj.AK47_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_maxMagazine = WeaponHandleObj.AK47_baseMagazine + (WeaponHandleObj.AK47_maxMagazineLevel - 1) * WeaponHandleObj.AK47_maxMagazineIncrement;                        
                        }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_maxMagazineUpgradeCost;
                            WeaponHandleObj.Rocket_maxMagazineLevel += 1;
                            WeaponHandleObj.Rocket_maxMagazineUpgradeCost = round(WeaponHandleObj.Rocket_maxMagazineUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_maxMagazine = WeaponHandleObj.Rocket_baseMagazine + (WeaponHandleObj.Rocket_maxMagazineLevel - 1) * WeaponHandleObj.Rocket_maxMagazineIncrement;                        
                        }
                        break;
                    }
                }
                break;
                
                case 2:
                if (global.i_currency &gt;= Player.i_maxHealthUpgradeCost &amp;&amp; Player.i_maxHealthLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxHealthUpgradeCost;
                    Player.i_maxHealthLevel += 1;
                    Player.i_maxHealthUpgradeCost = round(Player.i_maxHealthUpgradeCost * 1.5);
                    Player.i_maxHealth = Player.i_baseMaxHealth + ((Player.i_maxHealthLevel - 1) * Player.i_maxHealthIncrement);                        
                }
                break;
                
                case 3:
                if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
                {
                    switch (equipmentNames[0])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.Handgun_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipOneMagazineCost;
                            Player.i_equipOneID.i_magazine += 1;
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.AK47_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipOneMagazineCost;
                            Player.i_equipOneID.i_magazine += 1;
                        }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.Rocket_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipOneMagazineCost;
                            Player.i_equipOneID.i_magazine += 1;
                        }
                        break;
                    }
                }
                
                else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
                {
                    switch (equipmentNames[1])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.Handgun_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                            Player.i_equipTwoID.i_magazine += 1;
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.AK47_maxMagazine)
                            {
                                global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                                Player.i_equipTwoID.i_magazine += 1;
                            }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.Rocket_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                            Player.i_equipTwoID.i_magazine += 1;
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
    
    else
    {
        draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.26, 2, 2, 0, c_white, 1);
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    // Option One Upgrades: Max Magazine Upgrades for guns (both), Player Max Health, Magazine Purchase 1
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.26 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.26 + 34))
    {
        draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.26, 2, 2, 0, c_white, 1);
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                switch (equipmentNames[0])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_maxMagazineUpgradeCost;
                        WeaponHandleObj.Handgun_maxMagazineLevel += 1;
                        WeaponHandleObj.Handgun_maxMagazineUpgradeCost = round(WeaponHandleObj.Handgun_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_maxMagazine = WeaponHandleObj.Handgun_baseMagazine + (WeaponHandleObj.Handgun_maxMagazineLevel - 1) * WeaponHandleObj.Handgun_maxMagazineIncrement;
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.AK47_maxMagazineUpgradeCost;
                        WeaponHandleObj.AK47_maxMagazineLevel += 1;
                        WeaponHandleObj.AK47_maxMagazineUpgradeCost = round(WeaponHandleObj.AK47_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.AK47_maxMagazine = WeaponHandleObj.AK47_baseMagazine + (WeaponHandleObj.AK47_maxMagazineLevel - 1) * WeaponHandleObj.AK47_maxMagazineIncrement;                        
                    }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_maxMagazineUpgradeCost;
                        WeaponHandleObj.Rocket_maxMagazineLevel += 1;
                        WeaponHandleObj.Rocket_maxMagazineUpgradeCost = round(WeaponHandleObj.Rocket_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_maxMagazine = WeaponHandleObj.Rocket_baseMagazine + (WeaponHandleObj.Rocket_maxMagazineLevel - 1) * WeaponHandleObj.Rocket_maxMagazineIncrement;                        
                    }
                    break;
                    break;
                }
                break;
                
                case 2:
                switch (equipmentNames[1])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_maxMagazineLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_maxMagazineUpgradeCost;
                        WeaponHandleObj.Handgun_maxMagazineLevel += 1;
                        WeaponHandleObj.Handgun_maxMagazineUpgradeCost = round(WeaponHandleObj.Handgun_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_maxMagazine = WeaponHandleObj.Handgun_baseMagazine + (WeaponHandleObj.Handgun_maxMagazineLevel - 1) * WeaponHandleObj.Handgun_maxMagazineIncrement;
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.AK47_maxMagazineLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.AK47_maxMagazineUpgradeCost;
                        WeaponHandleObj.AK47_maxMagazineLevel += 1;
                        WeaponHandleObj.AK47_maxMagazineUpgradeCost = round(WeaponHandleObj.AK47_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.AK47_maxMagazine = WeaponHandleObj.AK47_baseMagazine + (WeaponHandleObj.AK47_maxMagazineLevel - 1) * WeaponHandleObj.AK47_maxMagazineIncrement;                        
                    }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_maxMagazineUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_maxMagazineLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_maxMagazineUpgradeCost;
                        WeaponHandleObj.Rocket_maxMagazineLevel += 1;
                        WeaponHandleObj.Rocket_maxMagazineUpgradeCost = round(WeaponHandleObj.Rocket_maxMagazineUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_maxMagazine = WeaponHandleObj.Rocket_baseMagazine + (WeaponHandleObj.Rocket_maxMagazineLevel - 1) * WeaponHandleObj.Rocket_maxMagazineIncrement;                        
                    }
                    break;
                }
                break;
                
                case 3:
                if (global.i_currency &gt;= Player.i_maxHealthUpgradeCost &amp;&amp; Player.i_maxHealthLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxHealthUpgradeCost;
                    Player.i_maxHealthLevel += 1;
                    Player.i_maxHealthUpgradeCost = round(Player.i_maxHealthUpgradeCost * 1.5);
                    Player.i_maxHealth = Player.i_baseMaxHealth + ((Player.i_maxHealthLevel - 1) * Player.i_maxHealthIncrement);                        
                }
                break;
                
                case 4:
                switch (equipmentNames[0])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.Handgun_maxMagazine)
                    {
                        global.i_currency = global.i_currency - i_equipOneMagazineCost;
                        Player.i_equipOneID.i_magazine += 1;
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.AK47_maxMagazine)
                    {
                        global.i_currency = global.i_currency - i_equipOneMagazineCost;
                        Player.i_equipOneID.i_magazine += 1;
                    }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= i_equipOneMagazineCost &amp;&amp; Player.i_equipOneID.i_magazine &lt; WeaponHandleObj.Rocket_maxMagazine)
                    {
                        global.i_currency = global.i_currency - i_equipOneMagazineCost;
                        Player.i_equipOneID.i_magazine += 1;
                    }
                    break;
                }
                break;
            }
        }
    }
    
    else
    {
        draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.26, 2, 2, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Upgrade Purchase Icon Two for each upgrade
// Option 2 Upgrade: Ammo Damage Upgrades for guns (both), Player Multiplier, Player Health Purchase
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.06 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.06 + 34))
    {
        draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.06, 2, 2, 0, c_white, 1);
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
                {
                    switch (equipmentNames[0])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_damageUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_damageUpgradeCost;
                            
                            WeaponHandleObj.Handgun_damageLevel += 1;
                            WeaponHandleObj.Handgun_damageUpgradeCost = round(WeaponHandleObj.Handgun_damageUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_damage = WeaponHandleObj.Handgun_baseDamage + ((WeaponHandleObj.Handgun_damageLevel - 1) * WeaponHandleObj.Handgun_damageIncrement);
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_damageUpgradeCost &amp;&amp; WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_damageUpgradeCost;
                            
                            WeaponHandleObj.AK47_damageLevel += 1;
                            WeaponHandleObj.AK47_damageUpgradeCost = round(WeaponHandleObj.AK47_damageUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_damage = WeaponHandleObj.AK47_baseDamage + ((WeaponHandleObj.AK47_damageLevel - 1) * WeaponHandleObj.AK47_damageIncrement);
                        }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_damageUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_damageUpgradeCost;
                            
                            WeaponHandleObj.Rocket_damageLevel += 1;
                            WeaponHandleObj.Rocket_damageUpgradeCost = round(WeaponHandleObj.Rocket_damageUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_damage = WeaponHandleObj.Rocket_baseDamage + ((WeaponHandleObj.Rocket_damageLevel - 1) * WeaponHandleObj.Rocket_damageIncrement);
                        }
                        break;
                    }
                }
                
                else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
                {
                    switch (equipmentNames[1])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_damageUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_damageUpgradeCost;
                            
                            WeaponHandleObj.Handgun_damageLevel += 1;
                            WeaponHandleObj.Handgun_damageUpgradeCost = round(WeaponHandleObj.Handgun_damageUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_damage = WeaponHandleObj.Handgun_baseDamage + ((WeaponHandleObj.Handgun_damageLevel - 1) * WeaponHandleObj.Handgun_damageIncrement);
                        }
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_damageUpgradeCost &amp;&amp; WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_damageUpgradeCost;
                            
                            WeaponHandleObj.AK47_damageLevel += 1;
                            WeaponHandleObj.AK47_damageUpgradeCost = round(WeaponHandleObj.AK47_damageUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_damage = WeaponHandleObj.AK47_baseDamage + ((WeaponHandleObj.AK47_damageLevel - 1) * WeaponHandleObj.AK47_damageIncrement);
                        }
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_damageUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_damageUpgradeCost;
                            
                            WeaponHandleObj.Rocket_damageLevel += 1;
                            WeaponHandleObj.Rocket_damageUpgradeCost = round(WeaponHandleObj.Rocket_damageUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_damage = WeaponHandleObj.Rocket_baseDamage + ((WeaponHandleObj.Rocket_damageLevel - 1) * WeaponHandleObj.Rocket_damageIncrement);
                        }
                        break;
                    }
                }
                break;
                
                case 2:
                if (global.i_currency &gt;= Player.i_maxDamageMultiplierCost &amp;&amp; Player.i_maxDamageMultiplierLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxDamageMultiplierCost;                        
                    Player.i_maxDamageMultiplierLevel += 1;
                    Player.i_maxDamageMultiplierCost = round(Player.i_maxDamageMultiplierCost * 1.5);
                    Player.f_damageMultiplier = Player.f_baseDamageMultiplier + ((Player.i_maxDamageMultiplierLevel - 1) * Player.f_damageMultiplierIncrement);
                }
                break;
                
                case 3:
                if (global.i_currency &gt;= Player.i_healCost &amp;&amp; Player.i_health &lt; Player.i_maxHealth)
                {
                    global.i_currency = global.i_currency - Player.i_healCost;
                    Player.i_health = Player.i_maxHealth;
                }
                break;
            }
        }
    }
    
    else
    {
        draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.06, 2, 2, 0, c_white, 1);
    }
}

/// Upgrade Purchase Icon Two for each upgrade
// Option 2 Upgrade: Ammo Damage Upgrades for guns (both), Player Multiplier, Player Health Purchase
else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.06 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.06 + 34))
    {
        draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.06, 2, 2, 0, c_white, 1);
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                switch (equipmentNames[0])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_damageUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_damageUpgradeCost;
                        
                        WeaponHandleObj.Handgun_damageLevel += 1;
                        WeaponHandleObj.Handgun_damageUpgradeCost = round(WeaponHandleObj.Handgun_damageUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_damage = WeaponHandleObj.Handgun_baseDamage + ((WeaponHandleObj.Handgun_damageLevel - 1) * WeaponHandleObj.Handgun_damageIncrement);
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_damageUpgradeCost &amp;&amp; WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.AK47_damageUpgradeCost;
                        
                        WeaponHandleObj.AK47_damageLevel += 1;
                        WeaponHandleObj.AK47_damageUpgradeCost = round(WeaponHandleObj.AK47_damageUpgradeCost * 1.5);
                        WeaponHandleObj.AK47_damage = WeaponHandleObj.AK47_baseDamage + ((WeaponHandleObj.AK47_damageLevel - 1) * WeaponHandleObj.AK47_damageIncrement);
                    }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_damageUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_damageUpgradeCost;
                        
                        WeaponHandleObj.Rocket_damageLevel += 1;
                        WeaponHandleObj.Rocket_damageUpgradeCost = round(WeaponHandleObj.Rocket_damageUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_damage = WeaponHandleObj.Rocket_baseDamage + ((WeaponHandleObj.Rocket_damageLevel - 1) * WeaponHandleObj.Rocket_damageIncrement);
                    }
                    break;
                }
                break;
                
                case 2:
                switch (equipmentNames[1])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_damageUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_damageLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_damageUpgradeCost;
                        
                        WeaponHandleObj.Handgun_damageLevel += 1;
                        WeaponHandleObj.Handgun_damageUpgradeCost = round(WeaponHandleObj.Handgun_damageUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_damage = WeaponHandleObj.Handgun_baseDamage + ((WeaponHandleObj.Handgun_damageLevel - 1) * WeaponHandleObj.Handgun_damageIncrement);
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_damageUpgradeCost &amp;&amp; WeaponHandleObj.AK47_damageLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.AK47_damageUpgradeCost;
                        
                        WeaponHandleObj.AK47_damageLevel += 1;
                        WeaponHandleObj.AK47_damageUpgradeCost = round(WeaponHandleObj.AK47_damageUpgradeCost * 1.5);
                        WeaponHandleObj.AK47_damage = WeaponHandleObj.AK47_baseDamage + ((WeaponHandleObj.AK47_damageLevel - 1) * WeaponHandleObj.AK47_damageIncrement);
                    }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_damageUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_damageLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_damageUpgradeCost;
                        
                        WeaponHandleObj.Rocket_damageLevel += 1;
                        WeaponHandleObj.Rocket_damageUpgradeCost = round(WeaponHandleObj.Rocket_damageUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_damage = WeaponHandleObj.Rocket_baseDamage + ((WeaponHandleObj.Rocket_damageLevel - 1) * WeaponHandleObj.Rocket_damageIncrement);
                    }
                    break;
                }
                break;
                
                case 3:
                if (global.i_currency &gt;= Player.i_maxDamageMultiplierCost &amp;&amp; Player.i_maxDamageMultiplierLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxDamageMultiplierCost;                        
                    Player.i_maxDamageMultiplierLevel += 1;
                    Player.i_maxDamageMultiplierCost = round(Player.i_maxDamageMultiplierCost * 1.5);
                    Player.f_damageMultiplier = Player.f_baseDamageMultiplier + ((Player.i_maxDamageMultiplierLevel - 1) * Player.f_damageMultiplierIncrement);
                }
                break;
                
                case 4:
                switch (equipmentNames[1])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.Handgun_maxMagazine)
                    {
                        global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                        Player.i_equipTwoID.i_magazine += 1;
                    }
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.AK47_maxMagazine)
                        {
                            global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                            Player.i_equipTwoID.i_magazine += 1;
                        }
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= i_equipTwoMagazineCost &amp;&amp; Player.i_equipTwoID.i_magazine &lt; WeaponHandleObj.Rocket_maxMagazine)
                    {
                        global.i_currency = global.i_currency - i_equipTwoMagazineCost;
                        Player.i_equipTwoID.i_magazine += 1;
                    }
                    break;
                }
                break;
            }
        }
    }
    
    else
    {
        draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y - _sprite_size_y * 0.06, 2, 2, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Upgrade Purchase Icon Three for each upgrade
// Option 3 Upgrade: Fire-rate Upgrades for guns (both), Player Movement
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.14 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.14 + 34))
    {
        if (i_selectedSlot == 1 || i_selectedSlot == 2)
        {
            draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.14, 2, 2, 0, c_white, 1);
        }
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "")
                {
                    switch (equipmentNames[0])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_cooldownUpgradeCost;
                        
                            WeaponHandleObj.Handgun_cooldownLevel += 1;
                            WeaponHandleObj.Handgun_cooldownUpgradeCost = round(WeaponHandleObj.Handgun_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_cooldown = WeaponHandleObj.Handgun_basecooldown - ((WeaponHandleObj.Handgun_cooldownLevel - 1) * WeaponHandleObj.Handgun_cooldownIncrement);
                        }    
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                            {
                                global.i_currency = global.i_currency - WeaponHandleObj.AK47_cooldownUpgradeCost;
                            
                                WeaponHandleObj.AK47_cooldownLevel += 1;
                                WeaponHandleObj.AK47_cooldownUpgradeCost = round(WeaponHandleObj.AK47_cooldownUpgradeCost * 1.5);
                                WeaponHandleObj.AK47_cooldown = WeaponHandleObj.AK47_basecooldown - ((WeaponHandleObj.AK47_cooldownLevel - 1) * WeaponHandleObj.AK47_cooldownIncrement);
                            }  
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_cooldownUpgradeCost;
                        
                            WeaponHandleObj.Rocket_cooldownLevel += 1;
                            WeaponHandleObj.Rocket_cooldownUpgradeCost = round(WeaponHandleObj.Rocket_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_cooldown = WeaponHandleObj.Rocket_basecooldown - ((WeaponHandleObj.Rocket_cooldownLevel - 1) * WeaponHandleObj.Rocket_cooldownIncrement);
                        }   
                        break;
                    }
                }
                
                else if (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != "")
                {
                    switch (equipmentNames[1])
                    {
                        default:
                        break;
                        
                        case "Handgun":
                        if (global.i_currency &gt;= WeaponHandleObj.Handgun_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Handgun_cooldownUpgradeCost;
                        
                            WeaponHandleObj.Handgun_cooldownLevel += 1;
                            WeaponHandleObj.Handgun_cooldownUpgradeCost = round(WeaponHandleObj.Handgun_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.Handgun_cooldown = WeaponHandleObj.Handgun_basecooldown - ((WeaponHandleObj.Handgun_cooldownLevel - 1) * WeaponHandleObj.Handgun_cooldownIncrement);
                        }    
                        break;
                        
                        case "AK-47":
                        if (global.i_currency &gt;= WeaponHandleObj.AK47_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                            {
                                global.i_currency = global.i_currency - WeaponHandleObj.AK47_cooldownUpgradeCost;
                            
                                WeaponHandleObj.AK47_cooldownLevel += 1;
                                WeaponHandleObj.AK47_cooldownUpgradeCost = round(WeaponHandleObj.AK47_cooldownUpgradeCost * 1.5);
                                WeaponHandleObj.AK47_cooldown = WeaponHandleObj.AK47_basecooldown - ((WeaponHandleObj.AK47_cooldownLevel - 1) * WeaponHandleObj.AK47_cooldownIncrement);
                            }  
                        break;
                        
                        case "Rocket":
                        if (global.i_currency &gt;= WeaponHandleObj.Rocket_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.Rocket_cooldownUpgradeCost;
                        
                            WeaponHandleObj.Rocket_cooldownLevel += 1;
                            WeaponHandleObj.Rocket_cooldownUpgradeCost = round(WeaponHandleObj.Rocket_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.Rocket_cooldown = WeaponHandleObj.Rocket_basecooldown - ((WeaponHandleObj.Rocket_cooldownLevel - 1) * WeaponHandleObj.Rocket_cooldownIncrement);
                        }   
                        break;
                    }
                }
                break;
                
                case 2:
                if (global.i_currency &gt;= Player.i_moveSpeedUpgradeCost &amp;&amp; Player.f_moveSpeedLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_moveSpeedUpgradeCost;
                
                    Player.f_moveSpeedLevel += 1;
                    Player.i_moveSpeedUpgradeCost = round(Player.i_moveSpeedUpgradeCost * 1.5);
                    Player.f_moveSpeed = Player.f_baseMoveSpeed + ((Player.f_moveSpeedLevel - 1) * Player.f_moveSpeedIncrement);
                }     
                break;
            }
        }
    }
    
    else
    {
        if (i_selectedSlot == 1 || i_selectedSlot == 2)
        {
            draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.14, 2, 2, 0, c_white, 1);
        }
    }
}

/// Upgrade Purchase Icon Three for each upgrade
// Option 3 Upgrade: Fire-rate Upgrades for guns (both), Player Movement
else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.14 - 34) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.14 + 34))
    {
        draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.14, 2, 2, 0, c_white, 1);
        
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            switch (i_selectedSlot)
            {
                default:
                break;
                
                case 1:
                switch (equipmentNames[0])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_cooldownUpgradeCost;
                    
                        WeaponHandleObj.Handgun_cooldownLevel += 1;
                        WeaponHandleObj.Handgun_cooldownUpgradeCost = round(WeaponHandleObj.Handgun_cooldownUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_cooldown = WeaponHandleObj.Handgun_basecooldown - ((WeaponHandleObj.Handgun_cooldownLevel - 1) * WeaponHandleObj.Handgun_cooldownIncrement);
                    }    
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_cooldownUpgradeCost;
                        
                            WeaponHandleObj.AK47_cooldownLevel += 1;
                            WeaponHandleObj.AK47_cooldownUpgradeCost = round(WeaponHandleObj.AK47_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_cooldown = WeaponHandleObj.AK47_basecooldown - ((WeaponHandleObj.AK47_cooldownLevel - 1) * WeaponHandleObj.AK47_cooldownIncrement);
                        }  
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_cooldownUpgradeCost;
                    
                        WeaponHandleObj.Rocket_cooldownLevel += 1;
                        WeaponHandleObj.Rocket_cooldownUpgradeCost = round(WeaponHandleObj.Rocket_cooldownUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_cooldown = WeaponHandleObj.Rocket_basecooldown - ((WeaponHandleObj.Rocket_cooldownLevel - 1) * WeaponHandleObj.Rocket_cooldownIncrement);
                    }   
                    break;
                }
                break;
                
                case 2:
                switch (equipmentNames[1])
                {
                    default:
                    break;
                    
                    case "Handgun":
                    if (global.i_currency &gt;= WeaponHandleObj.Handgun_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Handgun_cooldownLevel &lt;= WeaponHandleObj.Handgun_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Handgun_cooldownUpgradeCost;
                    
                        WeaponHandleObj.Handgun_cooldownLevel += 1;
                        WeaponHandleObj.Handgun_cooldownUpgradeCost = round(WeaponHandleObj.Handgun_cooldownUpgradeCost * 1.5);
                        WeaponHandleObj.Handgun_cooldown = WeaponHandleObj.Handgun_basecooldown - ((WeaponHandleObj.Handgun_cooldownLevel - 1) * WeaponHandleObj.Handgun_cooldownIncrement);
                    }    
                    break;
                    
                    case "AK-47":
                    if (global.i_currency &gt;= WeaponHandleObj.AK47_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.AK47_cooldownLevel &lt;= WeaponHandleObj.AK47_MaxLevel)
                        {
                            global.i_currency = global.i_currency - WeaponHandleObj.AK47_cooldownUpgradeCost;
                        
                            WeaponHandleObj.AK47_cooldownLevel += 1;
                            WeaponHandleObj.AK47_cooldownUpgradeCost = round(WeaponHandleObj.AK47_cooldownUpgradeCost * 1.5);
                            WeaponHandleObj.AK47_cooldown = WeaponHandleObj.AK47_basecooldown - ((WeaponHandleObj.AK47_cooldownLevel - 1) * WeaponHandleObj.AK47_cooldownIncrement);
                        }  
                    break;
                    
                    case "Rocket":
                    if (global.i_currency &gt;= WeaponHandleObj.Rocket_cooldownUpgradeCost &amp;&amp; WeaponHandleObj.Rocket_cooldownLevel &lt;= WeaponHandleObj.Rocket_MaxLevel)
                    {
                        global.i_currency = global.i_currency - WeaponHandleObj.Rocket_cooldownUpgradeCost;
                    
                        WeaponHandleObj.Rocket_cooldownLevel += 1;
                        WeaponHandleObj.Rocket_cooldownUpgradeCost = round(WeaponHandleObj.Rocket_cooldownUpgradeCost * 1.5);
                        WeaponHandleObj.Rocket_cooldown = WeaponHandleObj.Rocket_basecooldown - ((WeaponHandleObj.Rocket_cooldownLevel - 1) * WeaponHandleObj.Rocket_cooldownIncrement);
                    }   
                    break;
                }
                break;
                
                case 3:
                if (global.i_currency &gt;= Player.i_moveSpeedUpgradeCost &amp;&amp; Player.f_moveSpeedLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_moveSpeedUpgradeCost;
                
                    Player.f_moveSpeedLevel += 1;
                    Player.i_moveSpeedUpgradeCost = round(Player.i_moveSpeedUpgradeCost * 1.5);
                    Player.f_moveSpeed = Player.f_baseMoveSpeed + ((Player.f_moveSpeedLevel - 1) * Player.f_moveSpeedIncrement);
                }     
                break;
                
                case 4:
                if (global.i_currency &gt;= Player.i_healCost &amp;&amp; Player.i_health &lt; Player.i_maxHealth)
                {
                    global.i_currency = global.i_currency - Player.i_healCost;
                    Player.i_health = Player.i_maxHealth;
                }
                break;
            }
        }
    }
    
    else
    {
        draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.14, 2, 2, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Upgrade Purchase Icon Four for each upgrade
// Option 4 Upgrade: Player Armour
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    if (i_selectedSlot == 2)
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.34 - 34) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.34 + 34))
        {
            draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.34, 2, 2, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.i_currency &gt;= Player.i_maxArmourUpgradeCost &amp;&amp; Player.i_maxArmourLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxArmourUpgradeCost;
                    Player.i_maxArmourLevel += 1;
                    Player.i_maxArmourUpgradeCost = round(Player.i_maxArmourUpgradeCost * 1.5);
                    Player.f_armour = Player.f_baseArmour + ((Player.i_maxArmourLevel - 1) * Player.f_armourIncrement);                        
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.34, 2, 2, 0, c_white, 1);
        }
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    if (i_selectedSlot == 3)
    {
        if (device_mouse_x_to_gui(0) &gt; (x + _sprite_size_x * 0.35 - 34) &amp;&amp; 
            device_mouse_x_to_gui(0) &lt; (x + _sprite_size_x * 0.35 + 34) &amp;&amp; 
            device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.34 - 34) &amp;&amp; 
            device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.34 + 34))
        {
            draw_sprite_ext(spr_plus_round, 1, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.34, 2, 2, 0, c_white, 1);
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if (global.i_currency &gt;= Player.i_maxArmourUpgradeCost &amp;&amp; Player.i_maxArmourLevel &lt;= Player.i_playerMaxUpgrade)
                {
                    global.i_currency = global.i_currency - Player.i_maxArmourUpgradeCost;
                    Player.i_maxArmourLevel += 1;
                    Player.i_maxArmourUpgradeCost = round(Player.i_maxArmourUpgradeCost * 1.5);
                    Player.f_armour = Player.f_baseArmour + ((Player.i_maxArmourLevel - 1) * Player.f_armourIncrement);                        
                }
            }
        }
        
        else
        {
            draw_sprite_ext(spr_plus_round, 0, x + _sprite_size_x * 0.35, y + _sprite_size_y * 0.34, 2, 2, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Slot on clicking
if ((equipmentNames[0] != "" &amp;&amp; equipmentNames[1] == "") ||
    (equipmentNames[0] == "" &amp;&amp; equipmentNames[1] != ""))
{
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.25 - (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.25 + (28 * 1.5)))
        {
            if (i_selectedSlot != 1)
            {
                i_selectedSlot = 1;
            }
        }
        
        else if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; y - (28 * 1.5)&amp;&amp; 
                device_mouse_y_to_gui(0) &lt; y + (28 * 1.5))
        {
            if (i_selectedSlot != 2)
            {
                i_selectedSlot = 2;
            }
        }
        
        else if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.25 - (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.25 + (28 * 1.5)))
        {
            if (i_selectedSlot != 3)
            {
                i_selectedSlot = 3;
            }
        }
    }
}

else if (equipmentNames[0] != "" &amp;&amp; equipmentNames[1] != "")
{
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.3 - (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.3 + (28 * 1.5)))
        {
            if (i_selectedSlot != 1)
            {
                i_selectedSlot = 1;
            }
        }
        
        else if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (y - _sprite_size_y * 0.1 - (28 * 1.5)) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (y - _sprite_size_y * 0.1 + (28 * 1.5)))
        {
            if (i_selectedSlot != 2)
            {
                i_selectedSlot = 2;
            }
        }
        
        else if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.1 - (28 * 1.5))&amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.1 + (28 * 1.5)))
        {
            if (i_selectedSlot != 3)
            {
                i_selectedSlot = 3;
            }
        }
        
        else if (device_mouse_x_to_gui(0) &gt; (x - _sprite_size_x * 0.4 - (28 * 1.5)) &amp;&amp; 
        device_mouse_x_to_gui(0) &lt; (x - _sprite_size_x * 0.4 + (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &gt; (y + _sprite_size_y * 0.3 - (28 * 1.5)) &amp;&amp; 
        device_mouse_y_to_gui(0) &lt; (y + _sprite_size_y * 0.3 + (28 * 1.5)))
        {
            if (i_selectedSlot != 4)
            {
                i_selectedSlot = 4;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
