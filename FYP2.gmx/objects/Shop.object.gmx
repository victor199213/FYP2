<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*image_xscale *= 1.5;
image_yscale *= 1.5;

x = global.GUI_width * 0.5;
y = global.GUI_height * 0.5;*/

i_selectedSlot = 1;
i_totalEquipments = ds_list_size(global.EquipmentList);

var i;
for (i = 0; i &lt; i_totalEquipments; i += 1)
{
    tempName = ds_list_find_value(global.EquipmentList, 0 + i);
    equipmentNames[i] = tempName;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setting the fonts for the shop
// The background for Shop
draw_sprite_ext(spr_background_inv, 0, global.GUI_width * 0.5, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 1);


// Options for different types of upgrade
switch (i_totalEquipments)
{
    default:
    break;

    // Slot 1
    case 1:
        if (i_selectedSlot == 1)
        {
           draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 0.5);  
        }
        
        else
        {
            draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 1); 
        }
        
        if (equipmentNames[0] == "Handgun")
        {
            draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.35, 3, 3, 0, c_white, 1);
            
            // Giving the available options for upgrades, along with the name of the Item
            // Name of the weapon in first slot
            draw_sprite_ext(spr_hud2_nametag, 0, global.GUI_width * 0.55, global.GUI_height * 0.35, 2, 2, 0, c_white, 1);
            draw_set_font(fnt_UIName);
            draw_set_color(c_white);
            draw_text(global.GUI_width * 0.525, global.GUI_height * 0.335, equipmentNames[0]);
            
            // Available upgrades
            // First Option           
            if (Handgun.i_maxMagazineLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: " + string(Handgun.i_maxMagazineLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.45, "Cost: " + string(Handgun.i_maxMagazineUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.475, global.magazine_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.45 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.45 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        Handgun.i_maxMagazineLevel += 1;
                        Handgun.i_maxMagazineUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                        Handgun.i_maxMagazine = Handgun.i_maxMagazineLevel;
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.45, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.425, "Magazine Level: Max");                
            }
            
            //Second Option
            if (Handgun.i_damageLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: " + string(Handgun.i_damageLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.55, "Cost: " + string(Handgun.i_damageUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.575, global.damage_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.55 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.55 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        Handgun.i_damageLevel += 1;
                        Handgun.i_damageUpgradeCost = round(Handgun.i_maxMagazineUpgradeCost * 1.5);
                        Handgun.i_damage = Handgun.i_damage * Handgun.i_damageLevel;
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.55, 1, 1, 0, c_white, 1);
                }           
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.525, "Damage Level: Max");            
            }
                
            //Third Option
            if (Handgun.i_cooldownLevel &lt;= Handgun.i_MaxLevel)
            {
                draw_set_font(fnt_UIDescription);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: " + string(Handgun.i_cooldownLevel));
                
                draw_set_font(fnt_UIDescriptiontwo);
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.65, "Cost: " + string(Handgun.i_cooldownUpgradeCost));
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.675, global.cooldown_description);
            
                if (device_mouse_x_to_gui(0) &gt; (global.GUI_width * 0.65 - 17) &amp;&amp; 
                device_mouse_x_to_gui(0) &lt; (global.GUI_width * 0.65 + 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.65 - 17) &amp;&amp; 
                device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.65 + 17))
                {
                    draw_sprite_ext(spr_plus_round, 1, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                    if (device_mouse_check_button_pressed(0, mb_left))
                    {
                        Handgun.i_cooldownLevel += 1;
                        Handgun.i_cooldownUpgradeCost = round(Handgun.i_cooldownUpgradeCost * 1.5);
                        Handgun.f_cooldown -= 0.1;
                    }
                }
                
                else
                {
                    draw_set_font(fnt_UIDescription);
                    draw_sprite_ext(spr_plus_round, 0, global.GUI_width * 0.65, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);
                }            
            }
            
            else
            {
                draw_text(global.GUI_width * 0.5, global.GUI_height * 0.625, "Fire-rate Level: Max");
            }
                                   
            draw_set_font(-1);
            draw_set_color(c_black);    
        } 

        

    break;
    
    case 2:
    // Slot 2
        if (i_selectedSlot == 2)
        {
            draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 0.5); 
        }
        
        else
        {
            draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 1.5, 1.5, 0, c_white, 1); 
        }
        draw_sprite_ext(shooter_wood_smallGuns, 0, global.GUI_width * 0.375, global.GUI_height * 0.5, 3, 3, 0, c_white, 1);
    break;
}

// Slot 3
if (i_selectedSlot == 3)
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1.5, 1.5, 0, c_white, 0.5); 
}

else
{
    draw_sprite_ext(spr_slot_inv, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1.5, 1.5, 0, c_white, 1); 
} 
draw_sprite_ext(Sprite_Player_Idle_Right, 0, global.GUI_width * 0.375, global.GUI_height * 0.65, 1, 1, 0, c_white, 1);

// Drawing out the available options
//draw_sprite_ext(spr_hud2_nametag, 0, global.GUI_width * 0.3, global.GUI_height * 0.25, 2, 2, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
