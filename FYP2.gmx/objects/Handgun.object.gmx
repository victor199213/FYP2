<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>shooter_wood_smallGuns</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Properties of a Handgun
i_ammo = 20;
i_maxAmmo = 20;

// Reload speed of the handgun. Cannot be upgraded
f_reloadSpeed = 1;
f_reloadTime = 0;
b_isReload = false;

// Magazines of handgun, and the total number of magazines you can hold. Can be upgraded
i_magazine = 3;
i_maxMagazineIncrement = 1;
i_baseMagazine = 1;
i_maxMagazine = 1;
// Maximum number of Magazines upgrade
i_maxMagazineLevel = 1;
i_maxMagazineUpgradeCost = 10;

// Damage of the handgun. Can be upgraded
i_damage = 30;
i_damageIncrement = 5;
i_baseDamage = 30;
i_maxDamage = 100;
// Damage upgrade
i_damageLevel = 1;
i_damageUpgradeCost = 15;

// Fire rate of the handgun. Can be upgraded
f_cooldown = 1;
f_cooldownIncrement = 0.1;
f_maxcooldown = 0.5;
f_basecooldown = 1;
f_cooldown_timer = 0;
// Handgun's fire rate upgrade
i_cooldownLevel = 1;
i_cooldownUpgradeCost = 30;

// Handgun's upgrades available, and its cost
i_MaxLevel = 3;

b_fire = true;
name = "Handgun";

image_index = 0;
image_speed = 0;

image_xscale *= 1.5;
image_yscale *= 1.5;

// Creating offsets to match with Pleyer
offset_x = 32 * 0.4;
offset_y = 15;

// Creating the depth of the Handgun
depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handgun.f_cooldown_timer = Handgun.f_cooldown_timer + (1 / room_speed);
x = Player.x + offset_x;
y = Player.y + offset_y;

if (Handgun.f_cooldown_timer &gt; Handgun.f_cooldown)
{
    Handgun.b_fire = true;
}

if (Player.SHOOT &amp;&amp; Handgun.b_fire == true &amp;&amp; b_isReload == false)
{
    if (i_ammo &gt; 0)
    {      
        Handgun.b_fire = false;
        Handgun.f_cooldown_timer = 0;
        instance_create(Handgun.x, Handgun.y, Gunfire);
        instance_create(Handgun.x, Handgun.y, Handgun_Ammo);
        i_ammo -= 1;
    }
}

if (Player.RELOAD &amp;&amp; b_isReload == false)
{
    if (i_magazine &gt; 0)
    {
        b_isReload = true;
        i_magazine = i_magazine - 1;    
    }

}

if (b_isReload == true)
{
    f_reloadTime = f_reloadTime + (1 / room_speed);
    if (Player.b_faceLeft == true)
    {
        image_angle = -90;
    }
    
    else if (Player.b_faceRight == true)
    {
        image_angle = 90;
    }
    
    if (f_reloadTime &gt; f_reloadSpeed)
    {
        i_ammo = i_maxAmmo;
        f_reloadTime = 0;
        image_angle = 0;
        b_isReload = false;
    }
}

// Rotate the image if the player is facing left
if (Player.b_faceLeft == true)
{
    image_xscale = -1.5;
    offset_x = 32 * 0.4 * -1;
}

else if (Player.b_faceRight == true)
{
    image_xscale = 1.5;
    offset_x = 32 * 0.4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
