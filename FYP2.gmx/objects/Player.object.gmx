<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sprite_Player_Idle_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize Variables
f_verticalSpeed = 0;
f_horizontalSpeed = 0;
f_jumpSpeed = 14;

// Checks if the player is jumping
b_isJumping = false;

// Checks if the player is facing left or right
b_faceLeft = false;
b_faceRight = true;

// Stats for the player
// 1. Health, and the max Health. Can be upgraded.
i_health = 100;
i_maxHealthIncrement = 10;
i_baseMaxHealth = 100;
i_maxHealth = 100;
// Max Health upgrade
i_maxHealthLevel = 1;
i_maxHealthUpgradeCost = 50;

// 2. Damage Multiplier
f_damageMultiplier = 1;
f_damageMultiplierIncrement = 0.1;
f_baseDamageMultiplier = 1;
f_maxDamageMultiplier = 1.3;
// Damage multiplier upgrade
i_maxDamageMultiplierLevel = 1;
i_maxDamageMultiplierCost = 50;

// 3. Movement Speed
f_moveSpeed = 3;
f_moveSpeedIncrement = 0.5;;
f_baseMoveSpeed = 3;
f_maxMoveSpeed = 15;
// Move speed upgrade
f_moveSpeedLevel = 1;
i_moveSpeedUpgradeCost = 30;

// 4. Armor
f_armour = 1;
f_armourIncrement = 0.05;
f_baseArmour = 1;
f_maxArmour = 0.5;
// Armour upgrade
i_maxArmourLevel = 1;
i_maxArmourUpgradeCost = 80;

// Stats to be added during power up
i_armourPierceDamage = 0;
i_armourPierceMaxDamage = 50;

//Getting the first weapon on the list of EquipmentList
name = ds_list_find_value(global.EquipmentList, 0);
if (name == "Handgun")
{
    instance_create(0, 0, Handgun);
}

// Creating the depth of the player
depth = -1;

// Player's stats for upgrades
i_playerMaxUpgrade = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creating player's movement
MOVELEFT = keyboard_check(vk_left);
MOVERIGHT = keyboard_check(vk_right);
JUMP = keyboard_check_pressed(vk_space);
SHOOT = keyboard_check(ord('Z'));
OPEN = keyboard_check_pressed(ord('O'));
RELOAD = keyboard_check_pressed(ord('R'));

// React to inputs
move = -MOVELEFT + MOVERIGHT;
f_horizontalSpeed = move * f_moveSpeed;

if (f_verticalSpeed &lt; 10)
{
    f_verticalSpeed += global.f_gravity;
}

if (place_meeting(x, y + 1, Wall))
{
    f_verticalSpeed = JUMP * - f_jumpSpeed;
    b_isJumping = false;
}

if (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right))
{
    b_faceLeft = true;
    b_faceRight = false;
}

if (!keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_right))
{
    b_faceLeft = false;
    b_faceRight = true;
}

if (JUMP)
{
    b_isJumping = true;
}

if (b_isJumping == true)
{
    if (b_faceLeft == true &amp;&amp; b_faceRight == false)
    {
        sprite_index = Sprite_Player_Jump_Left;
    }
    
    if (b_faceLeft == false &amp;&amp; b_faceRight == true)
    {
        sprite_index = Sprite_Player_Jump_Right;
    }
}

else
{
    if (b_faceLeft == true &amp;&amp; b_faceRight == false)
    {
        if (move &lt; 0)
        {
            sprite_index = Sprite_Player_Walk_Left;
            image_speed = 10 / room_speed;
        }
        
        else
        {
            sprite_index = Sprite_Player_Idle_Left;
        }

    }
    
    if (b_faceLeft == false &amp;&amp; b_faceRight == true)
    {
        if (move &gt; 0)
        {
            sprite_index = Sprite_Player_Walk_Right;
        }
        
        else
        {
            sprite_index = Sprite_Player_Idle_Right;
            image_speed = 10 / room_speed;
        }

    }
}

// Horizontal Collision
if (place_meeting(x + f_horizontalSpeed, y, Wall))
{
    while(!place_meeting(x + sign(f_horizontalSpeed), y, Wall))
    {
        x += sign(f_horizontalSpeed);
    }
    f_horizontalSpeed = 0;
}

x += f_horizontalSpeed;

// Vertical Collision
if (place_meeting(x, y + f_verticalSpeed, Wall))
{
    while (!place_meeting(x, y + sign(f_verticalSpeed), Wall))
    {
        y += sign(f_verticalSpeed);
    }
    f_verticalSpeed = 0;
}

y += f_verticalSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(global.GUI_width * 0.7, 50, global.i_currency);
draw_text(global.GUI_width * 0.7, 150, i_maxHealth);
draw_text(global.GUI_width * 0.7, 175, f_damageMultiplier);
draw_text(global.GUI_width * 0.7, 200, f_moveSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
