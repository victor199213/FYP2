<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sprite_Player_Idle_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize Variables
f_verticalSpeed = 0;
f_horizontalSpeed = 0;
f_jumpSpeed = 10;
f_moveSpeed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creating player's movement
MOVELEFT = keyboard_check(vk_left);
MOVERIGHT = keyboard_check(vk_right);
JUMP = keyboard_check_pressed(vk_space);

// React to inputs
move = -MOVELEFT + MOVERIGHT;
f_horizontalSpeed = move * f_moveSpeed;

if (f_verticalSpeed &lt; 15)
{
    f_verticalSpeed += global.f_gravity;
}

if (place_meeting(x, y + 1, Wall))
{
    f_verticalSpeed = JUMP * - f_jumpSpeed;
}

// Horizontal Collision
if (place_meeting(x + f_horizontalSpeed, y, Wall))
{
    while(!place_meeting(x + sign(f_horizontalSpeed), y, Wall))
    {
        x += sign(f_horizontalSpeed);
    }
    f_horizontalSpeed = 0;
}

x += f_horizontalSpeed;

// Horizontal Collision
if (place_meeting(x, y + f_verticalSpeed, Wall))
{
    while (!place_meeting(x, y + sign(f_verticalSpeed), Wall))
    {
        y += sign(f_verticalSpeed);
    }
    f_verticalSpeed = 0;
}

y += f_verticalSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
