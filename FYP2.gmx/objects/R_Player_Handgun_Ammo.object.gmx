<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>shooter_bullets</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Properties of a Handgun Ammo
i_damage = round(R_Handgun.i_damage * R_Player.f_damageMultiplier);
f_bullet_hspeed = 0;
i_spawnTime = 3;
i_spawnCounter = 0;

if (R_Player.b_faceLeft == true)
{
    direction = 180;
}

else if (R_Player.b_faceRight == true)
{
    direction = 0;
}

if (direction == 180)
{
    f_bullet_hspeed = -10;
}

if (direction == 0)
{
    f_bullet_hspeed = 10;
}

image_index = 6;
image_speed = 0;
image_xscale *= 2;
image_yscale *= 2;

// Creating the depth of the Handgun Ammo
depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_spawnCounter = i_spawnCounter + (1 / room_speed);
if (i_spawnCounter &gt; i_spawnTime)
{
    instance_destroy();
}

if (place_meeting(x + f_bullet_hspeed, y, Wall))
{
    f_bullet_hspeed = 0;
    instance_create(x, y, AmmoExplosion);
    AmmoExplosion.image_xscale *= 0.5;
    AmmoExplosion.image_yscale *= 0.5;
    instance_destroy();
}

else if (instance_place(x, y, BEnemy))
{
    f_bullet_hspeed = 0;
    BEnemy.ammo_onhit_x = x;

    instance_create(x, y, AmmoExplosion);
    AmmoExplosion.image_xscale *= 0.5;
    AmmoExplosion.image_yscale *= 0.5;
    instance_destroy();
}

else if (instance_place(x, y, BEnemyShooting))
{
    f_bullet_hspeed = 0;
    BEnemyShooting.ammo_onhit_x = x;

    instance_create(x, y, AmmoExplosion);
    AmmoExplosion.image_xscale *= 0.5;
    AmmoExplosion.image_yscale *= 0.5;
    instance_destroy();
}

else if (instance_place(x, y, BEnemyElite))
{
    f_bullet_hspeed = 0;
    BEnemyElite.ammo_onhit_x = x;

    instance_create(x, y, AmmoExplosion);
    AmmoExplosion.image_xscale *= 0.5;
    AmmoExplosion.image_yscale *= 0.5;
    instance_destroy();  
}

else if (place_meeting(x, y, B_Player))
{
    f_bullet_hspeed = 0;
    B_Player.ammo_onhit_x = x;
    
    instance_create(x, y, AmmoExplosion);
    AmmoExplosion.image_xscale *= 0.5;
    AmmoExplosion.image_yscale *= 0.5;
    instance_destroy();  
}

x += f_bullet_hspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
