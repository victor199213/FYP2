<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setting variable for fixed position of x and y, and sprite size
_posx = Pregame_Background.x + Pregame_Background._sprite_size_x - room_width * 0.2;
_posy = Pregame_Background.y - (Pregame_Background._sprite_size_y * 0.75);

// Changing the image Properties
image_xscale = 4;
image_yscale = 1;
image_speed = 0;
image_index = 0;

switch (MainMenuStructure._Pregame_Selection)
{
    default:
    break;
    
    case "Items":
    image_index = 0;
    break;
    
    case "Characters":
    image_index = 3;
    break;
}

// Fixing the position of the button
x = _posx;
y = _posy;

// Character selection at characters page, and animation variables
_hoveredpos_x = global.GUI_width * 0.3;
_boxpos_x = global.GUI_width * 0.3;

f_firstBox = global.GUI_width * 0.35;
f_secondBox = global.GUI_width * 0.5;
f_thirdBox = global.GUI_width * 0.65;

var i;
for (i = 0; i &lt; 3; i += 1)
{
    b_selectedSlot[i] = false;
}
b_characterSelected = false;

_character = "Daniel";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_posx = Pregame_Background.x - Pregame_Background._sprite_size_x + room_width * 0.2;
_posy = Pregame_Background.y - (Pregame_Background._sprite_size_y * 0.75);

/*switch (MainMenuStructure._Pregame_Selection)
{
    default:
    break;
    
    case "Items":
    image_index = 0;
    break;
    
    case "Characters":
    image_index = 1;
    break;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (MainMenuStructure._Pregame_Selection)
{
    default:
    break;
    
    case "Items":
    image_index = 0;
    break;
    
    case "Characters":
    image_index = 3;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (MainMenuStructure._Pregame_Selection != "Characters")
{
    MainMenuStructure._Pregame_Selection = "Characters";
    image_index = 3;
    Item_Button.image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_UIName);
draw_set_valign(fa_middle);
draw_set_color(make_color_rgb(224,255,255));

// Animations of what happens during pre-game selection for characters
if (MainMenuStructure._Pregame_Selection == "Characters")
{   
    // Backgroun used for each characters
    draw_sprite_ext(spr_background_gear, 0, f_firstBox, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);
    draw_sprite_ext(spr_background_gear, 0, f_secondBox, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);
    draw_sprite_ext(spr_background_gear, 0, f_thirdBox, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);
    
    /*
        Sprites of all characters, and the available stats given to the characters
        Coded by the following sequences: (character 1, cahracter 2, character 3).
        - Sprite 
        - Available Stats
        - Stats Rating
        - Description of characters
    */
    
    // Character One
    draw_set_color(c_aqua);
    draw_sprite_ext(Daniel_Idle_Right, 0, f_firstBox, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 1);
    draw_text_transformed(global.GUI_width * 0.295, global.GUI_height * 0.42, "Health:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.295, global.GUI_height * 0.45, "Dmg Multiplier:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.295, global.GUI_height * 0.48, "Move Speed:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.295, global.GUI_height * 0.51, "Armour:", 0.6, 0.6, 0);
    // Resetting the color back to the defaulted
    draw_set_color(make_color_rgb(224,255,255));
    
    // Character Two
    draw_set_color(c_aqua);
    draw_sprite_ext(Daniel_Idle_Right, 0, f_secondBox, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 1);
    draw_text_transformed(global.GUI_width * 0.445, global.GUI_height * 0.42, "Health:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.445, global.GUI_height * 0.45, "Dmg Multiplier:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.445, global.GUI_height * 0.48, "Move Speed:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.445, global.GUI_height * 0.51, "Armour:", 0.6, 0.6, 0);
    // Resetting the color back to the defaulted
    draw_set_color(make_color_rgb(224,255,255));
    
    // Character Three
    draw_set_color(c_aqua);
    draw_sprite_ext(Daniel_Idle_Right, 0, f_thirdBox, global.GUI_height * 0.35, 1.5, 1.5, 0, c_white, 1);
    draw_text_transformed(global.GUI_width * 0.595, global.GUI_height * 0.42, "Health:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.595, global.GUI_height * 0.45, "Dmg Multiplier:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.595, global.GUI_height * 0.48, "Move Speed:", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.595, global.GUI_height * 0.51, "Armour:", 0.6, 0.6, 0);
    // Resetting the color back to the defaulted
    draw_set_color(make_color_rgb(224,255,255));
    
    // Setting alignment for all characters' stats rating
    draw_set_halign(fa_right);
    // Character One
    draw_text_transformed(global.GUI_width * 0.405, global.GUI_height * 0.42, "Average", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.405, global.GUI_height * 0.45, "Average", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.405, global.GUI_height * 0.48, "Average", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.405, global.GUI_height * 0.51, "Average", 0.6, 0.6, 0);
    
    // Character Two
    draw_text_transformed(global.GUI_width * 0.555, global.GUI_height * 0.42, "Excellent", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.555, global.GUI_height * 0.45, "Sub-par", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.555, global.GUI_height * 0.48, "Average", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.555, global.GUI_height * 0.51, "Good", 0.6, 0.6, 0);
    
    // Character Three
    draw_text_transformed(global.GUI_width * 0.705, global.GUI_height * 0.42, "Bad", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.705, global.GUI_height * 0.45, "Excellent", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.705, global.GUI_height * 0.48, "Good", 0.6, 0.6, 0);
    draw_text_transformed(global.GUI_width * 0.705, global.GUI_height * 0.51, "Sub-par", 0.6, 0.6, 0);
    
    // Description of the character
    draw_set_halign(fa_middle);
    // Character One
    draw_text_ext_transformed(f_firstBox, global.GUI_height * 0.6, c_DanielDescription, -1, global.GUI_width * 0.15, 0.6, 0.6, 0);
    draw_text_ext_transformed(f_secondBox, global.GUI_height * 0.6, c_DanielDescription, -1, global.GUI_width * 0.15, 0.6, 0.6, 0);
    draw_text_ext_transformed(f_thirdBox, global.GUI_height * 0.6, c_DanielDescription, -1, global.GUI_width * 0.15, 0.6, 0.6, 0);
    
    draw_set_halign(fa_left);
    // Checking if the mouse is inside the particular character selection box or not
    if (device_mouse_y_to_gui(0) &lt; (global.GUI_height * 0.5 + (297 * 0.7)) &amp;&amp;
        device_mouse_y_to_gui(0) &gt; (global.GUI_height * 0.5 - (297 * 0.7)))
    {
        // Character One Selection
        if (device_mouse_x_to_gui(0) &lt; (f_firstBox + (172 * 0.7)) &amp;&amp;
        device_mouse_x_to_gui(0) &gt; (f_firstBox - (172 * 0.7)))
        {            
            if (b_selectedSlot[0] == false)
            {
                _hoveredpos_x = f_firstBox;
                draw_sprite_ext(spr_fg_gear, 0, _hoveredpos_x, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);    
            }
            
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                
                if ((b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == true &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == true))
                {
                    _boxpos_x = f_firstBox;
                    b_selectedSlot[0] = true;
                    b_selectedSlot[1] = false;
                    b_selectedSlot[2] = false;
                    b_characterSelected = true;
                }
                
                else if (b_selectedSlot[0] == true &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false)
                {
                    b_selectedSlot[0] = false;
                    b_characterSelected = false;
                }                
            }            
                
        }
        
        // Character Two Selection
        if (device_mouse_x_to_gui(0) &lt; (f_secondBox + (172 * 0.7)) &amp;&amp;
        device_mouse_x_to_gui(0) &gt; (f_secondBox - (172 * 0.7)))
        {
            if (b_selectedSlot[1] == false)
            {
                _hoveredpos_x = f_secondBox;
                draw_sprite_ext(spr_fg_gear, 0, _hoveredpos_x, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);
            }
            
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                if ((b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == true &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == true))
                {
                    _boxpos_x = f_secondBox;
                    b_selectedSlot[1] = true;
                    b_selectedSlot[0] = false;
                    b_selectedSlot[2] = false;
                    b_characterSelected = true;
                }
                
                else if (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == true &amp;&amp; b_selectedSlot[2] == false)
                {
                    b_selectedSlot[1] = false;
                    b_characterSelected = false;
                }                
            }             
        }
        
        // Character Three Selection
        if (device_mouse_x_to_gui(0) &lt; (f_thirdBox + (172 * 0.7)) &amp;&amp;
        device_mouse_x_to_gui(0) &gt; (f_thirdBox - (172 * 0.7)))
        {
            if (b_selectedSlot[2] == false)
            {
                _hoveredpos_x = f_thirdBox;
                draw_sprite_ext(spr_fg_gear, 0, _hoveredpos_x, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);
            }
            
            if (device_mouse_check_button_pressed(0, mb_left))
            {
                
                if ((b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == true &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == false) ||
                    (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == true &amp;&amp; b_selectedSlot[2] == false))
                {
                    _boxpos_x = f_thirdBox;
                    b_selectedSlot[2] = true;
                    b_selectedSlot[0] = false;
                    b_selectedSlot[1] = false;
                    b_characterSelected = true;
                }
                
                else if (b_selectedSlot[0] == false &amp;&amp; b_selectedSlot[1] == false &amp;&amp; b_selectedSlot[2] == true)
                {
                    b_selectedSlot[2] = false;
                    b_characterSelected = false;
                }                
            }             
        }
        // Drawing the outline of the box to indicate character selection
        //draw_sprite_ext(spr_fg_gear, 1, _boxpos_x, global.GUI_height * 0.5, 0.4, 0.4, 0, c_white, 1);    
    }
    
    if (b_selectedSlot[0] == true || b_selectedSlot[1] == true || b_selectedSlot[2] == true)
    {
        draw_sprite_ext(spr_fg_gear, 1, _boxpos_x, global.GUI_height * 0.5, 0.7, 0.7, 0, c_white, 1);    
    }

}

// Resetting draw fonts to its original
draw_set_font(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(fnt_UIName);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(make_color_rgb(224,255,255));

draw_text_transformed(x, y, "Characters", 1.2, 1.2, 0);

draw_set_font(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
