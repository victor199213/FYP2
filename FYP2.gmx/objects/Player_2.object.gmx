<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>B_Player_Idle_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize Variables
f_verticalSpeed = 0;
f_horizontalSpeed = 0;
f_jumpSpeed = 14;
f_noDamageCooldown = 2;
f_noDamageTimer = 0;
b_noDamage = true;

// Checks if the player is jumping
b_isJumping = false;

// Checks if the player is facing left or right
b_faceLeft = false;
b_faceRight = true;

// Stats for the player
// 1. Health, and the max Health. Can be upgraded.
i_health = 100
i_maxHealth = 100

// 2. Damage Multiplier
f_damageMultiplier = 1;
f_maxDamageMultiplier = 1;

// 3. Movement Speed
f_moveSpeed = 3;
f_maxMoveSpeed = 3;

// 4. Armor
f_armour = 1
f_maxArmour = 1;
i_reducedDamage = 0

// Stats to be added during power up
i_armourPierceDamage = 0;
i_armourPierceMaxDamage = 50;

// Viewing stats for either player or current equipments
b_viewPlayerTab = false;

instance_create(0, 0, B_Handgun);

// Creating the depth of the player
depth = -1;

// Creating the down time for players if players die
b_deadAnim = false;
b_isDead = false;

// Gets knockback and disable movements if player gets knock-back
b_knockback = false;
knockback_direction = 0;
f_knockbackTimer = 0;
f_knockbackTime = 1;
f_knockbackSpeed = 0;
// Knockback calculations upon hitting other player's ammo
f_knockbackAccel = 10;
ammo_onhit_x = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creating player's movement
MOVELEFT = keyboard_check(ord('J'));
MOVERIGHT = keyboard_check(ord('L'));
JUMP = keyboard_check_pressed(ord('I'));
SHOOT = keyboard_check(ord('P'));

if (f_verticalSpeed &lt; 10)
{
    f_verticalSpeed += global.f_gravity;
}

if (b_deadAnim == false &amp;&amp; b_isDead == false)
{
    // React to inputs
    move = -MOVELEFT + MOVERIGHT;
    f_horizontalSpeed = move * f_moveSpeed;
    if (place_meeting(x, y + 1, Wall))
    {
        f_verticalSpeed = JUMP * - f_jumpSpeed;
        b_isJumping = false;
    }

    if (keyboard_check(ord('J')) &amp;&amp; !keyboard_check(ord('L')))
    {
        b_faceLeft = true;
        b_faceRight = false;
    }
    
    if (!keyboard_check(ord('J')) &amp;&amp; keyboard_check(ord('L')))
    {
        b_faceLeft = false;
        b_faceRight = true;
    }
    
    if (JUMP)
    {
        b_isJumping = true;
    }
    
    if (b_isJumping == true)
    {
        if (b_faceLeft == true &amp;&amp; b_faceRight == false)
        {
            sprite_index = B_Player_Jump_Left;
        }
        
        if (b_faceLeft == false &amp;&amp; b_faceRight == true)
        {
            sprite_index = B_Player_Jump_Right;
        }
    }
    
    else
    {
        if (b_faceLeft == true &amp;&amp; b_faceRight == false)
        {
            if (move &lt; 0)
            {
                sprite_index = B_Player_Walk_Left;            
                image_speed = 10 / room_speed;
            }
            
            else
            {
                sprite_index = B_Player_Idle_Left;
            }
        }
        
        if (b_faceLeft == false &amp;&amp; b_faceRight == true)
        {
            if (move &gt; 0)
            {
                sprite_index = B_Player_Walk_Right;
                image_speed = 10 / room_speed;
            }
            
            else
            {
                sprite_index = B_Player_Idle_Right;
            }
        }
    }
    
    if (b_knockback == true)
    {
        // Knock back when hit by other player's bullet
        f_knockbackTimer = f_knockbackTimer + (1 / room_speed);
        knockback_direction = sign(ammo_onhit_x - x);
        
        f_knockbackSpeed = f_knockbackAccel * (f_knockbackTime - f_knockbackTimer) * knockback_direction;
        if (position_meeting(x - f_knockbackSpeed, y, Wall))
        {
            f_knockbackTimer = 0;
            f_knockbackSpeed = 0;
            x = x + sign(ammo_onhit_x - x) * 30;
            b_knockback = false;
        }
        
        else
        {
            x -= f_knockbackSpeed;
        }
        
        if (f_knockbackTimer &gt;= f_knockbackTime)
        {
            f_knockbackTimer = 0;
            f_knockbackSpeed = 0;
            b_knockback = false;
        }
    }
}

// Taking damage from the enemy
// 1. Melee enemy
if (place_meeting(x, y, REnemy))
{
    if (b_noDamage == false)
    {
        i_reducedDamage = round(10 / f_armour);
        if (i_health &gt; i_reducedDamage)
        {
            i_health = i_health - i_reducedDamage;        
        }
        
        else
        {
            i_health = 0;
            b_deadAnim = true;
        }
        b_noDamage = true;
    }
}

// 2. Ranged enemy
if (place_meeting(x, y, REnemyProObj))
{
    if (b_noDamage == false)
    {
        i_reducedDamage = round(10 / f_armour);
        if (i_health &gt; i_reducedDamage)
        {
            i_health = i_health - i_reducedDamage;        
        }
        
        else
        {
            i_health = 0;
            b_deadAnim = true;
        }    
        b_noDamage = true;
    }
}

// 3. EnemyElite range attack
if (place_meeting(x, y, REnemyEliteProObj))
{
    if (b_noDamage == false)
    {
        i_reducedDamage = round(10 / f_armour);
        if (i_health &gt; i_reducedDamage)
        {
            i_health = i_health - i_reducedDamage;        
        }
        
        else
        {
            i_health = 0;
            b_deadAnim = true;
        }    
        b_noDamage = true;
    }
}

// 4. EnemyElite close attack
if (place_meeting(x, y, REnemyElite))
{
    if (b_noDamage == false)
    {
        i_reducedDamage = round(10 / f_armour);
        if (i_health &gt; i_reducedDamage)
        {
            i_health = i_health - i_reducedDamage;        
        }
        
        else
        {
            i_health = 0;
            b_deadAnim = true;
        }    
        b_noDamage = true;
    }
}

if (b_deadAnim == true)
{
    if (b_faceLeft == true &amp;&amp; b_faceRight == false)
    {
        sprite_index = B_Player_Die_Left;
    }
    
    else
    {
        sprite_index = B_Player_Die_Right;
    }
    
    image_speed = 6 / room_speed;
    f_horizontalSpeed = 0;
    if (image_index &gt; image_number - 1)
    {
        with (B_Handgun)
        {
            instance_destroy();
        }
        b_deadAnim = false;
        b_isDead = true;
    }
}

if (b_noDamage == true)
{
    f_noDamageTimer = f_noDamageTimer + (1 / room_speed);
    if (f_noDamageTimer &gt; f_noDamageCooldown)
    {
        f_noDamageTimer = 0;
        i_reducedDamage = 0;
        b_noDamage = false;
    }
}

// Horizontal Collision
if (place_meeting(x + f_horizontalSpeed, y, Wall))
{
    while(!place_meeting(x + sign(f_horizontalSpeed), y, Wall))
    {
        x += sign(f_horizontalSpeed);
    }
    f_horizontalSpeed = 0;
}

x += f_horizontalSpeed;

// Vertical Collision
if (place_meeting(x, y + f_verticalSpeed, Wall))
{
    while (!place_meeting(x, y + sign(f_verticalSpeed), Wall))
    {
        y += sign(f_verticalSpeed);
    }
    f_verticalSpeed = 0;
}

y += f_verticalSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and healthbar
if (b_isDead == false)
{
    draw_self();
    if (b_deadAnim == false)
    {
        draw_healthbar(x - sprite_width * 0.5, y -(sprite_height * 0.6), x + sprite_width * 0.5, y - (sprite_height * 0.45), (i_health / i_maxHealth) * 100, c_black, c_red, c_lime, 0, true, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
