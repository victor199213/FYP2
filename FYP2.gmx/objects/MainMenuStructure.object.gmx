<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creating variables for buttons and GUI animations
f_alphaAnimUnselected = 0;
f_alphaAnimMainPage = 1;

/*
    This object handles all of the object instancing, deactivation when not
    in the correct Menu, and steps that the button instances will have.
    It is mainly all about animations. All buttons will not handle their own
    steps.
    The sequences will include:
    1. Main Menu
        a. Pregame Selection (Item, Character Selection, Weapons)
        b. Map Selection (Choosing of map to play with)
        c. Skill Selection (Choosing of skills for co-op)
            
    2. Option
        - Volume
            - BGM
            - SFX
        - Screen Size
    
    3. Exit (Exit Game)
*/

// Creating a value for switch cases to go around with menus
menu_choice = "Main Menu";
b_solo = true;

// A boolean to lock for start of game
b_start = false;

/*
    1. Main Menu
    Instancing the buttons in the main menu
*/
instance_create(1, 1, Game_Title);
instance_create(1, 1, Start_Button);
instance_create(1, 1, Option_Button);
instance_create(1, 1, Instruction_Button);
instance_create(1, 1, Exit_Button);

/*
    Options and Instructions
*/
instance_create(1, 1, Option);
instance_create(1, 1, Instruction);

/*
    1a. Pregame Selection
    Creating
    Instancing the buttons in the Pregame selection
*/
_Pregame_Selection = "Characters";
// Pregame Selection Objects (Solo)
instance_create(room_width * 0.5, room_height * 0.5, Pregame_Background);
instance_create(0, 0, Character_Button);
instance_create(0, 0, Weapon_Button);
instance_create(0, 0, Back_Button);
instance_create(0, 0, Single_Button);
instance_create(0, 0, Multi_Button);
instance_create(0, 0, Solo_OK_Button);

// Pregame Selection Objects (Multiplayer)
instance_create(0, 0, Coop_Button);
instance_create(0, 0, Versus_Button);
instance_create(0, 0, Multi_OK_Button);

/*
    1b. Pregame Selection
    Creating
    Instancing the buttons in the Map selection
*/
// Map Selection Objects
instance_create(0, 0, Map_Background);
instance_create(0, 0, Back_To_Pregame_Button);
instance_create(0, 0, Start_Game_Button);

/*
    1c. Skill Selection
    Creating
    Instancing the buttons in the Skill selection
*/
instance_create(0, 0, Skill_Background);
instance_create(0, 0, Coop_OK_Button);
instance_create(0, 0, Coop_Back_To_Pregame_Button);
instance_create(0, 0, Skill_One_List);
instance_create(0, 0, Skill_Two_List);

// Deactivate Option and Instruction
instance_deactivate_object(Option);
instance_deactivate_object(Instruction);

// Deactivate Pregame Selection Objects
instance_deactivate_object(Pregame_Background);
instance_deactivate_object(Character_Button);
instance_deactivate_object(Weapon_Button);
instance_deactivate_object(Back_Button);
instance_deactivate_object(Single_Button);
instance_deactivate_object(Solo_OK_Button);
instance_deactivate_object(Multi_Button);
instance_deactivate_object(Coop_Button);
instance_deactivate_object(Versus_Button);
instance_deactivate_object(Multi_OK_Button);
instance_deactivate_object(Skill_Background);
instance_deactivate_object(Coop_OK_Button);
instance_deactivate_object(Coop_Back_To_Pregame_Button);
instance_deactivate_object(Skill_One_List);
instance_deactivate_object(Skill_Two_List);

// Deactivate Map Selection Objects
instance_deactivate_object(Map_Background);
instance_deactivate_object(Back_To_Pregame_Button);
instance_deactivate_object(Start_Game_Button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Main Menu
/*
    This is where this object will handle all of the animations, starting with:
    1. Main Menu
        - Pregame Selection (Item, Character Selection)
            - Map Selection (Choosing of map to play with)
            
    2. Option
        - Volume
            - BGM
            - SFX
        - Screen Size
    
    3. Exit (Exit Game)
*/

if (menu_choice == "Main Menu")
{
    // The starting animation for all Main Menu. Run only once until the game is exited.
    with (Game_Title)
    {
        if (MainMenuStructure.b_start == false)
        {
            draw_alpha += global.f_alphaTime * (1 / room_speed);
            draw_set_alpha(draw_alpha);
            
            with (Start_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            with (Option_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            with (Instruction_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            with (Exit_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            if (draw_alpha &gt;= 1)
            {
                draw_alpha = 1;
                MainMenuStructure.b_start = true;
            }
        }
    }
    // Animation for Start Button
    with (Start_Button)
    {
        if (b_startAnim == true)
        {
            image_index = 1;
            with(Option_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with (Instruction_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Exit_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Game_Title)
            {
                draw_alpha = 0;
                draw_set_alpha(draw_alpha);
            }
            
            f_translate_y = f_translate_y + 25 * (1 / room_speed);
            y = y - f_translate_y;
            
            instance_deactivate_object(Option_Button);
            instance_deactivate_object(Instruction_Button);
            instance_deactivate_object(Exit_Button);
            instance_deactivate_object(Game_Title);
            
            if (y &lt; (0 - sprite_height))
            {
                draw_set_alpha(1);
                y = _posy;
                f_translate_y = 0;
                b_startAnim = false;
                image_index = 0;
                
                instance_deactivate_object(Start_Button);
                // Pregame Selection activation (Solo)
                instance_activate_object(Pregame_Background);
                instance_activate_object(Item_Button);
                instance_activate_object(Character_Button);
                instance_activate_object(Weapon_Button);
                instance_activate_object(Single_Button);
                instance_activate_object(Multi_Button);
                instance_activate_object(Solo_OK_Button);
                instance_activate_object(Back_Button);
                // Pregame Selection activation (Multiplayer)
                instance_activate_object(Coop_Button);
                instance_activate_object(Versus_Button);
                instance_activate_object(Multi_OK_Button);
                
                MainMenuStructure.menu_choice = "Pregame Selection";
            }
        }
    }
    
    with (Option_Button)
    {
        if (b_startAnim == true)
        {
            image_index = 1;
            with(Start_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Instruction_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with (Exit_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Game_Title)
            {
                draw_alpha = 0;
                draw_set_alpha(draw_alpha);
            }
            
            f_translate_y = f_translate_y + 25 * (1 / room_speed);
            y = y - f_translate_y;
            
            instance_deactivate_object(Start_Button);
            instance_deactivate_object(Instruction_Button);
            instance_deactivate_object(Exit_Button);
            instance_deactivate_object(Game_Title);
            
            if (y &lt; (0 - sprite_height))
            {
                draw_set_alpha(1);
                y = (0 - sprite_height);
                f_translate_y = 0;
                b_startAnim = false;
                image_index = 0;
                
                instance_activate_object(Option);
                instance_deactivate_object(Option_Button);
                MainMenuStructure.menu_choice = "Option";
            }
        }
    }
    
    with (Instruction_Button)
    {
        if (b_startAnim == true)
        {
            image_index = 1;
            with(Start_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Option_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with (Exit_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Game_Title)
            {
                draw_alpha = 0;
                draw_set_alpha(draw_alpha);
            }
            
            f_translate_y = f_translate_y + 25 * (1 / room_speed);
            y = y - f_translate_y;
            
            instance_deactivate_object(Start_Button);
            instance_deactivate_object(Option_Button);
            instance_deactivate_object(Exit_Button);
            instance_deactivate_object(Game_Title);
            
            if (y &lt; (0 - sprite_height))
            {
                draw_set_alpha(1);
                y = _posy;
                f_translate_y = 0;
                b_startAnim = false;
                image_index = 0;
                MainMenuStructure.menu_choice = "Instruction";
                
                instance_deactivate_object(Instruction_Button);
                instance_activate_object(Instruction);
            }
        }
    }
    
    with (Exit_Button)
    {
   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Option
if (menu_choice == "Option")
{
    if (Option.b_startAnim == true)
    {
        Option.f_translate_y = Option.f_translate_y + 25 * (1 / room_speed);
        Option.y = Option.y + Option.f_translate_y;
            
        if (Option.y &gt; Option._posy)
        {
            Option.y = Option._posy;
                 
            Option.f_translate_y = 0;
            Option.b_startAnim = false;
        }
    }
    
    if (Option.b_nextAnim == true)
    {
        Option.f_translate_y = Option.f_translate_y + 25 * (1 / room_speed);
        Option.y = Option.y - Option.f_translate_y;
            
        if (Option.y &lt; Option._offscreen_y)
        {
            Option.y = Option._offscreen_y;
                 
            Option.f_translate_y = 0;
            Option.b_nextAnim = false;
            Option.b_startAnim = true;
            
            // Activate Main Menu objects
            instance_activate_object(Start_Button);
            instance_activate_object(Option_Button);
            instance_activate_object(Instruction_Button);
            instance_activate_object(Exit_Button);
            instance_activate_object(Game_Title);
            
            // Main Menu resets
            script_execute(Start_Button_Soft_Reset);
            script_execute(Option_Button_Soft_Reset);
            script_execute(Instruction_Button_Soft_Reset);
            script_execute(Exit_Button_Soft_Reset);
            script_execute(Game_Title_Soft_Reset);
            script_execute(MainMenuStructure_Soft_Reset);
            
            instance_deactivate_object(Option);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Instruction
if (menu_choice == "Instruction")
{
    if (Instruction.b_startAnim == true)
    {
        Instruction.f_translate_y = Instruction.f_translate_y + 25 * (1 / room_speed);
        Instruction.y = Instruction.y + Instruction.f_translate_y;
            
        if (Instruction.y &gt; Instruction._posy)
        {
            Instruction.y = Instruction._posy;
                 
            Instruction.f_translate_y = 0;
            Instruction.b_startAnim = false;
        }
    }
    
    if (Instruction.b_nextAnim == true)
    {
        Instruction.f_translate_y = Instruction.f_translate_y + 25 * (1 / room_speed);
        Instruction.y = Instruction.y - Instruction.f_translate_y;
            
        if (Instruction.y &lt; Instruction._offscreen_y)
        {
            Instruction.y = Instruction._offscreen_y;
                 
            Instruction.f_translate_y = 0;
            Instruction.b_nextAnim = false;
            Instruction.b_startAnim = true;
            
            // Activate Main Menu objects
            instance_activate_object(Start_Button);
            instance_activate_object(Option_Button);
            instance_activate_object(Instruction_Button);
            instance_activate_object(Exit_Button);
            instance_activate_object(Game_Title);
            
            // Main Menu resets
            script_execute(Start_Button_Soft_Reset);
            script_execute(Option_Button_Soft_Reset);
            script_execute(Instruction_Button_Soft_Reset);
            script_execute(Exit_Button_Soft_Reset);
            script_execute(Game_Title_Soft_Reset);
            script_execute(MainMenuStructure_Soft_Reset);
            
            instance_deactivate_object(Instruction);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Pregame Selection
if (menu_choice == "Pregame Selection")
{
    if (Pregame_Background.b_startAnim == true)
    {
        Pregame_Background.f_translate_y = Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Pregame_Background.y = Pregame_Background.y + Pregame_Background.f_translate_y;
        
        // Objects that denotes solo game play
        Character_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Weapon_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Single_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Solo_OK_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Back_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        
        // Objects that denotes multiplayer game play
        Coop_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Versus_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_OK_Button.y += Pregame_Background.f_translate_y + 25 * (1 / room_speed);
            
        if (Pregame_Background.y &gt; Pregame_Background._posy)
        {
            Pregame_Background.y = Pregame_Background._posy;
            // Objects that denotes solo game play
            Character_Button.y = Character_Button._posy;
            Weapon_Button.y = Weapon_Button._posy;
            Single_Button.y = Single_Button._posy;
            Multi_Button.y = Multi_Button._posy;
            Solo_OK_Button.y = Solo_OK_Button._posy;
            Back_Button.y = Back_Button._posy;
            
            // Objects that denotes multiplayer game play
            Coop_Button.y = Coop_Button._posy;
            Versus_Button.y = Versus_Button._posy;
            Multi_OK_Button.y = Multi_OK_Button._posy;
                 
            Pregame_Background.f_translate_y = 0;
            Pregame_Background.b_startAnim = false;
        }
    }
    
    if (Pregame_Background.b_backAnim == true)
    {
        Pregame_Background.f_translate_y = Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        // Solo objects
        Character_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Weapon_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Single_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Solo_OK_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Back_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        
        // Multiplayer objects
        Coop_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Versus_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_OK_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        
        Pregame_Background.y = Pregame_Background.y - Pregame_Background.f_translate_y;
        
        if (Pregame_Background.y &lt; Pregame_Background._offscreen_y)
        {
            Pregame_Background.y = Pregame_Background._offscreen_y;
            // Solo objects
            Character_Button.y = Character_Button._posy;
            Weapon_Button.y = Weapon_Button._posy;
            Single_Button.y = Single_Button._posy;
            Multi_Button.y = Multi_Button._posy;
            Solo_OK_Button.y = Solo_OK_Button._posy;
            Back_Button.y = Back_Button._posy;
            
            // Multiplayer objects
            Coop_Button.y = Coop_Button._posy;
            Versus_Button.y = Versus_Button._posy;
            Multi_OK_Button.y = Multi_OK_Button._posy;
            
            Pregame_Background.f_translate_y = 0;
            Pregame_Background.b_backAnim = false;                             
            // Deactivate Pregame Selection Objects
 
            // Activate Main Menu objects
            instance_activate_object(Start_Button);
            instance_activate_object(Option_Button);
            instance_activate_object(Instruction_Button);
            instance_activate_object(Exit_Button);
            instance_activate_object(Game_Title);
            
            // Main Menu resets
            script_execute(Start_Button_Soft_Reset);
            script_execute(Option_Button_Soft_Reset);
            script_execute(Instruction_Button_Soft_Reset);
            script_execute(Exit_Button_Soft_Reset);
            script_execute(Game_Title_Soft_Reset);
            script_execute(MainMenuStructure_Soft_Reset);
            
            // Pre-game Selection Resets
            script_execute(Pregame_Background_Reset);
            script_execute(Character_Button_Reset);
            script_execute(Weapon_Button_Reset);                
            script_execute(Single_Button_Reset);                
            script_execute(Multi_Button_Reset);               
            script_execute(Back_Button_Reset);                
            
            // Deactivate Pre-game Selection objects (Solo)
            instance_deactivate_object(Character_Button);
            instance_deactivate_object(Weapon_Button);
            instance_deactivate_object(Single_Button);
            instance_deactivate_object(Multi_Button);
            instance_deactivate_object(Solo_OK_Button);
            instance_deactivate_object(Back_Button);
            instance_deactivate_object(Pregame_Background);
            // Deactivate Pre-game Selection objects (Multiplayer)
            instance_deactivate_object(Coop_Button);
            instance_deactivate_object(Versus_Button);
            instance_deactivate_object(Multi_OK_Button);
        }            
    }
    
    else if (Pregame_Background.b_nextAnim == true)
    {
        Pregame_Background.f_translate_y = Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        // Solo objects
        Character_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Weapon_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Single_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Solo_OK_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Back_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        // Multiplayer objects
        Coop_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Versus_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        Multi_OK_Button.y -= Pregame_Background.f_translate_y + 25 * (1 / room_speed);
        
        Pregame_Background.y = Pregame_Background.y - Pregame_Background.f_translate_y;
        
        if (Pregame_Background.y &lt; Pregame_Background._offscreen_y)
        {
            Pregame_Background.y = Pregame_Background._offscreen_y;
            // Solo objects
            Character_Button.y = Character_Button._posy;
            Weapon_Button.y = Weapon_Button._posy;
            Single_Button.y = Single_Button._posy;
            Multi_Button.y = Multi_Button._posy;
            Solo_OK_Button.y = Solo_OK_Button._posy;
            Back_Button.y = Back_Button._posy;
            // Multiplayer objects
            Coop_Button.y = Coop_Button._posy;
            Versus_Button.y = Versus_Button._posy;
            Multi_OK_Button.y = Multi_OK_Button._posy;
            
            Pregame_Background.f_translate_y = 0;
            Pregame_Background.b_nextAnim = false;                    
            
            if (b_solo == true)
            {
                // Determine which character's stats is going to be based on what the player decides to choose
                if (Character_Button.b_selectedSlot[0] == true &amp;&amp;
                    Character_Button.b_selectedSlot[1] == false &amp;&amp; 
                    Character_Button.b_selectedSlot[2] == false)
                {
                    script_execute(Daniel_Stats);
                }
                
                else if (Character_Button.b_selectedSlot[0] == false &amp;&amp;
                        Character_Button.b_selectedSlot[1] == true &amp;&amp; 
                        Character_Button.b_selectedSlot[2] == false)
                {
                    script_execute(Terry_Stats);
                }
                
                else if (Character_Button.b_selectedSlot[0] == false &amp;&amp;
                    Character_Button.b_selectedSlot[1] == false &amp;&amp; 
                    Character_Button.b_selectedSlot[2] == true)
                {
                    script_execute(Keith_Stats);
                }
                
                // Determine the weapons to bring in to game
                script_execute(Equipment);
                
                // Deactivate Pre-game Selection objects (Solo)
                instance_deactivate_object(Character_Button);
                instance_deactivate_object(Weapon_Button);
                instance_deactivate_object(Single_Button);
                instance_deactivate_object(Multi_Button);
                instance_deactivate_object(Solo_OK_Button);
                instance_deactivate_object(Back_Button);
                instance_deactivate_object(Pregame_Background);
                // Deactivate Pre-game Selection objects (Multiplayer)
                instance_deactivate_object(Coop_Button);
                instance_deactivate_object(Versus_Button);
                instance_deactivate_object(Multi_OK_Button);
                
                // Activate the next objects
                instance_activate_object(Map_Background);
                instance_activate_object(Back_To_Pregame_Button);
                instance_activate_object(Start_Game_Button);
                menu_choice = "Map Selection";
            }
            
            else
            {
                // Deactivate Pre-game Selection objects (Solo)
                instance_deactivate_object(Character_Button);
                instance_deactivate_object(Weapon_Button);
                instance_deactivate_object(Single_Button);
                instance_deactivate_object(Multi_Button);
                instance_deactivate_object(Solo_OK_Button);
                instance_deactivate_object(Back_Button);
                instance_deactivate_object(Pregame_Background);
                
                if (Versus_Button.b_isVersus == false &amp;&amp; Coop_Button.b_isCoop == true)
                {
                    instance_activate_object(Skill_Background);
                    instance_activate_object(Coop_OK_Button);
                    instance_activate_object(Coop_Back_To_Pregame_Button);
                    instance_activate_object(Skill_One_List);
                    instance_activate_object(Skill_Two_List);
                    menu_choice = "Skill Selection";
                }
                
                else if (Versus_Button.b_isVersus == true &amp;&amp; Coop_Button.b_isCoop == false)
                {
                    if (audio_is_playing(mus_titlescreen))
                    {
                        audio_stop_sound(mus_titlescreen);
                    }
                    room_goto(room2);
                }
                
                // Deactivate Pre-game Selection objects (Multiplayer)
                instance_deactivate_object(Coop_Button);
                instance_deactivate_object(Versus_Button);
                instance_deactivate_object(Multi_OK_Button);
            }
        }            
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Map Selection
if (menu_choice == "Map Selection")
{
    if (Map_Background.b_startAnim == true)
    {
        Map_Background.f_translate_y = Map_Background.f_translate_y + 25 * (1 / room_speed);
        Map_Background.y = Map_Background.y + Map_Background.f_translate_y;  
        Back_To_Pregame_Button.y = Back_To_Pregame_Button.y + Map_Background.f_translate_y;
        Start_Game_Button.y = Start_Game_Button.y + Map_Background.f_translate_y;
            
        if (Map_Background.y &gt; Map_Background._posy)
        {
            Map_Background.y = Map_Background._posy;    
            Back_To_Pregame_Button.y = Back_To_Pregame_Button._posy;
            Start_Game_Button.y = Start_Game_Button._posy;
                 
            Map_Background.f_translate_y = 0;
            Map_Background.b_startAnim = false;
        }
    }
    
    if (Map_Background.b_backAnim == true)
    {
        Map_Background.f_translate_y = Map_Background.f_translate_y + 25 * (1 / room_speed);
        Map_Background.y = Map_Background.y - Map_Background.f_translate_y;  
        Back_To_Pregame_Button.y = Back_To_Pregame_Button.y - Map_Background.f_translate_y;
        Start_Game_Button.y = Start_Game_Button.y - Map_Background.f_translate_y;
            
        if (Map_Background.y &lt; Map_Background._offscreen_y)
        {
            Map_Background.y = Map_Background._posy;    
            Back_To_Pregame_Button.y = Back_To_Pregame_Button._posy;
            Start_Game_Button.y = Start_Game_Button._posy;
                 
            Map_Background.f_translate_y = 0;
            Map_Background.b_backAnim = false;
            
            // Activate Pre-game Selection objects (Solo)
            instance_activate_object(Character_Button);
            instance_activate_object(Weapon_Button);
            instance_activate_object(Single_Button);
            instance_activate_object(Multi_Button);
            instance_activate_object(Solo_OK_Button);
            instance_activate_object(Back_Button);
            instance_activate_object(Pregame_Background);
            // Deactivate Pre-game Selection objects (Multiplayer)
            instance_activate_object(Coop_Button);
            instance_activate_object(Versus_Button);
            instance_activate_object(Multi_OK_Button);
            
            // Pre-game Selection Resets
            script_execute(Pregame_Background_Reset);
            script_execute(Character_Button_Reset);
            script_execute(Weapon_Button_Reset);                
            script_execute(Single_Button_Reset);                
            script_execute(Multi_Button_Reset);               
            script_execute(Back_Button_Reset);  
        
            // Deactivate the next objects
            instance_deactivate_object(Map_Background);
            instance_deactivate_object(Back_To_Pregame_Button);
            instance_deactivate_object(Start_Game_Button);
            _Pregame_Selection = "Characters";
            menu_choice = "Pregame Selection";
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Choice: Skill Selection
if (menu_choice == "Skill Selection")
{
    if (Skill_Background.b_startAnim == true)
    {
        Skill_Background.f_translate_y = Skill_Background.f_translate_y + 25 * (1 / room_speed);
        Skill_Background.y += Skill_Background.f_translate_y;
        Coop_OK_Button.y += Skill_Background.f_translate_y;
        Coop_Back_To_Pregame_Button.y += Skill_Background.f_translate_y;
        Skill_One_List.y += Skill_Background.f_translate_y;
        Skill_Two_List.y += Skill_Background.f_translate_y;
        
        if (Skill_Background.y &gt; Skill_Background._posy)
        {
            Skill_Background.y = Skill_Background._posy;
            Coop_OK_Button.y = Coop_OK_Button._posy;
            Coop_Back_To_Pregame_Button.y = Coop_Back_To_Pregame_Button._posy;
            Skill_One_List.y = Skill_One_List.y;
            Skill_Two_List.y = Skill_Two_List.y;
            
            Skill_Background.f_translate_y = 0;
            Skill_Background.b_startAnim = false;
        }
    }
    
    if (Skill_Background.b_backAnim == true)
    {
        Skill_Background.f_translate_y = Skill_Background.f_translate_y + 25 * (1 / room_speed);
        Skill_Background.y -= Skill_Background.f_translate_y + 25 * (1 / room_speed);;
        Coop_OK_Button.y -= Skill_Background.f_translate_y;
        Coop_Back_To_Pregame_Button.y -= Skill_Background.f_translate_y;
        Skill_One_List.y -= Skill_Background.f_translate_y;
        Skill_Two_List.y -= Skill_Background.f_translate_y;
        
        if (Skill_Background.y &lt; Skill_Background._offscreen_y)
        {
            Skill_Background.y = Skill_Background._posy;
            Coop_OK_Button.y = Coop_OK_Button._posy;
            Coop_Back_To_Pregame_Button.y = Coop_Back_To_Pregame_Button._posy;
            Skill_One_List.y = Skill_One_List._posy;
            Skill_Two_List.y = Skill_Two_List._posy;
            
            Skill_Background.f_translate_y = 0;
            Skill_Background.b_backAnim = false;
            
            instance_deactivate_object(Skill_Background);
            instance_deactivate_object(Coop_OK_Button);
            instance_deactivate_object(Coop_Back_To_Pregame_Button);
            instance_deactivate_object(Skill_One_List);
            instance_deactivate_object(Skill_Two_List);
            
            instance_activate_object(Item_Button);
            instance_activate_object(Character_Button);
            instance_activate_object(Weapon_Button);
            instance_activate_object(Single_Button);
            instance_activate_object(Multi_Button);
            instance_activate_object(Solo_OK_Button);
            instance_activate_object(Back_Button);
            instance_activate_object(Pregame_Background);
            
            instance_activate_object(Coop_Button);
            instance_activate_object(Versus_Button);
            instance_activate_object(Multi_OK_Button);
            menu_choice = "Pregame Selection";
            Pregame_Background.b_startAnim = true;
        }
    }
    
    else if (Skill_Background.b_nextAnim == true)
    {
        Skill_Background.f_translate_y = Skill_Background.f_translate_y + 25 * (1 / room_speed);
        Skill_Background.y -= Skill_Background.f_translate_y + 25 * (1 / room_speed);;
        Coop_OK_Button.y -= Skill_Background.f_translate_y;
        Coop_Back_To_Pregame_Button.y -= Skill_Background.f_translate_y;
        Skill_One_List.y -= Skill_Background.f_translate_y;
        Skill_Two_List.y -= Skill_Background.f_translate_y;
        
        if (Skill_Background.y &lt; Skill_Background._offscreen_y)
        {
            Skill_Background.y = Skill_Background._posy;
            Coop_OK_Button.y = Coop_OK_Button._posy;
            Coop_Back_To_Pregame_Button.y = Coop_Back_To_Pregame_Button._posy;
            Skill_One_List.y = Skill_One_List._posy;
            Skill_Two_List.y = Skill_Two_List._posy;
            
            Skill_Background.f_translate_y = 0;
            Skill_Background.b_nextAnim = false;
            
            instance_deactivate_object(Skill_Background);
            instance_deactivate_object(Coop_OK_Button);
            instance_deactivate_object(Coop_Back_To_Pregame_Button);
            instance_deactivate_object(Skill_One_List);
            instance_deactivate_object(Skill_Two_List);
            
            if (audio_is_playing(mus_titlescreen))
            {
                audio_stop_sound(mus_titlescreen);
            }
            room_goto(room3);
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
