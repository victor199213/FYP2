<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creating variables for buttons and GUI animations
f_alphaAnimUnselected = 0;
f_alphaAnimMainPage = 1;

/*
    This object handles all of the object instancing, deactivation when not
    in the correct Menu, and steps that the button instances will have.
    It is mainly all about animations. All buttons will not handle their own
    steps.
    The sequences will include:
    1. Main Menu
        a. Pregame Selection (Item, Character Selection, Weapons)
        b. Map Selection (Choosing of map to play with)
            
    2. Option
        - Volume
            - BGM
            - SFX
        - Screen Size
    
    3. Exit (Exit Game)
*/

/*
    1. Main Menu
    Instancing the buttons in the main menu
*/
instance_create(1, 1, Game_Title);
instance_create(1, 1, Start_Button);
instance_create(1, 1, Option_Button);
instance_create(1, 1, Exit_Button);

/*
    1a. Pregame Selection
    Creating
    Instancing the buttons in the Pregame selection
*/
_Pregame_Selection = "Items";
instance_create(room_width * 0.5, room_height * 0.5, Pregame_Background);
instance_create(0, 0, Item_Button);
instance_create(0, 0, Character_Button);
instance_create(0, 0, Weapon_Button);
instance_create(0, 0, Back_Button);

instance_deactivate_object(Pregame_Background);
instance_deactivate_object(Item_Button);
instance_deactivate_object(Character_Button);
instance_deactivate_object(Weapon_Button);
instance_deactivate_object(Back_Button);

// A boolean to lock for start of game
b_start = false;

// Creating a value for switch cases to go around with menus
menu_choice = "Main Menu";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    This is where this object will handle all of the animations, starting with:
    1. Main Menu
        - Pregame Selection (Item, Character Selection)
            - Map Selection (Choosing of map to play with)
            
    2. Option
        - Volume
            - BGM
            - SFX
        - Screen Size
    
    3. Exit (Exit Game)
*/

switch (menu_choice)
{
    default:
    break;
    
    case "Main Menu":
    // The starting animation for all Main Menu. Run only once until the game is exited.
    with (Game_Title)
    {
        if (MainMenuStructure.b_start == false)
        {
            draw_alpha += global.f_alphaTime * (1 / room_speed);
            draw_set_alpha(draw_alpha);
            
            with (Start_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            with (Option_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            with (Exit_Button)
            {
                image_alpha = Game_Title.draw_alpha + global.f_alphaTime * (1 / room_speed);
                if (image_alpha &gt;= 1)
                {
                    image_alpha = 1;
                }
            }
            
            if (draw_alpha &gt;= 1)
            {
                draw_alpha = 1;
                MainMenuStructure.b_start = true;
            }
        }
    }
    // Animation for Start Button
    with (Start_Button)
    {
        if (b_startAnim == true)
        {
            image_index = 1;
            with(Option_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Exit_Button)
            {
                image_alpha = MainMenuStructure.f_alphaAnimUnselected;
            }
            
            with(Game_Title)
            {
                draw_alpha = 0;
                draw_set_alpha(draw_alpha);
            }
            
            f_translate_y = f_translate_y + 25 * (1 / room_speed);
            y = y - f_translate_y;
            
            instance_deactivate_object(Option_Button);
            instance_deactivate_object(Exit_Button);
            instance_deactivate_object(Game_Title);
            
            if (y &lt; (0 - sprite_height))
            {
                draw_set_alpha(1);
                y = _posy;
                f_translate_y = 0;
                b_startAnim = false;
                image_index = 0;
                MainMenuStructure.menu_choice = "Pregame Selection";
                instance_deactivate_object(Start_Button);
                instance_activate_object(Pregame_Background);
                instance_activate_object(Item_Button);
                instance_activate_object(Character_Button);
                instance_activate_object(Weapon_Button);

            }
        }
    }
    
    with (Option_Button)
    {

    }
    
    with (Exit_Button)
    {
   
    }
    break;
    
    case "Pregame Selection":
    with (Pregame_Background)
    {
        if (b_startAnim == true)
        {
            f_translate_y = f_translate_y + 25 * (1 / room_speed);
            y = y + f_translate_y;
            
            with (Item_Button)
            {
                y = _posy;
            }
            
            with (Character_Button)
            {
                y = _posy;
            }
            
            with (Weapon_Button)
            {
                y = _posy;
            }
            
            if (y &gt; _posy)
            {
                y = _posy;
                
                with (Item_Button)
                {
                    y = _posy;
                }
                
                with (Character_Button)
                {
                    y = _posy;
                }
                
                with (Weapon_Button)
                {
                    y = _posy;
                }
                                
                f_translate_y = 0;
                b_startAnim = false;
            }
        }
    }
    break;
    
    case "Map Selection":
    break;
    
    case "Option":
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
